# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

# This file is auto-generated by test_po_tokens.sh. DO NOT EDIT!

.text




# Test po_tokens_1s00 tests PO_TOKENS when passed A=0x00 (BASIC keyword "RND")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "RND".
po_tokens_1s00_setup:
  jp      fake_reg_update1

po_tokens_1s00_setup_regs:
  ld      a, 0x00
  ld      iy, 0x5000
  ret

po_tokens_1s00_effects:
  ld      de, msg_po_tokens_1s00
  call    print_msg_de
  ret

po_tokens_1s00_effects_regs:
  push    af
  pop     de
  ldf     C_FLAG|N_FLAG|H_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s00: .asciz "RND"


# Test po_tokens_1s01 tests PO_TOKENS when passed A=0x01 (BASIC keyword "INKEY$")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "INKEY$".
po_tokens_1s01_setup:
  jp      fake_reg_update1

po_tokens_1s01_setup_regs:
  ld      a, 0x01
  ld      iy, 0x5000
  ret

po_tokens_1s01_effects:
  ld      de, msg_po_tokens_1s01
  call    print_msg_de
  ret

po_tokens_1s01_effects_regs:
  push    af
  pop     de
  ldf     C_FLAG|N_FLAG|H_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s01: .asciz "INKEY$"


# Test po_tokens_1s02 tests PO_TOKENS when passed A=0x02 (BASIC keyword "PI")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "PI".
po_tokens_1s02_setup:
  jp      fake_reg_update1

po_tokens_1s02_setup_regs:
  ld      a, 0x02
  ld      iy, 0x5000
  ret

po_tokens_1s02_effects:
  ld      de, msg_po_tokens_1s02
  call    print_msg_de
  ret

po_tokens_1s02_effects_regs:
  push    af
  pop     de
  ldf     C_FLAG|N_FLAG|H_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s02: .asciz "PI"


# Test po_tokens_1s03 tests PO_TOKENS when passed A=0x03 (BASIC keyword "FN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "FN ".
po_tokens_1s03_setup:
  jp      fake_reg_update1

po_tokens_1s03_setup_regs:
  ld      a, 0x03
  ld      iy, 0x5000
  ret

po_tokens_1s03_effects:
  ld      de, msg_po_tokens_1s03
  call    print_msg_de
  ret

po_tokens_1s03_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s03: .asciz "FN "


# Test po_tokens_1s04 tests PO_TOKENS when passed A=0x04 (BASIC keyword "POINT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "POINT ".
po_tokens_1s04_setup:
  jp      fake_reg_update1

po_tokens_1s04_setup_regs:
  ld      a, 0x04
  ld      iy, 0x5000
  ret

po_tokens_1s04_effects:
  ld      de, msg_po_tokens_1s04
  call    print_msg_de
  ret

po_tokens_1s04_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s04: .asciz "POINT "


# Test po_tokens_1s05 tests PO_TOKENS when passed A=0x05 (BASIC keyword "SCREEN$")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "SCREEN$ ".
po_tokens_1s05_setup:
  jp      fake_reg_update1

po_tokens_1s05_setup_regs:
  ld      a, 0x05
  ld      iy, 0x5000
  ret

po_tokens_1s05_effects:
  ld      de, msg_po_tokens_1s05
  call    print_msg_de
  ret

po_tokens_1s05_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s05: .asciz "SCREEN$ "


# Test po_tokens_1s06 tests PO_TOKENS when passed A=0x06 (BASIC keyword "ATTR")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "ATTR ".
po_tokens_1s06_setup:
  jp      fake_reg_update1

po_tokens_1s06_setup_regs:
  ld      a, 0x06
  ld      iy, 0x5000
  ret

po_tokens_1s06_effects:
  ld      de, msg_po_tokens_1s06
  call    print_msg_de
  ret

po_tokens_1s06_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s06: .asciz "ATTR "


# Test po_tokens_1s07 tests PO_TOKENS when passed A=0x07 (BASIC keyword "AT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "AT ".
po_tokens_1s07_setup:
  jp      fake_reg_update1

po_tokens_1s07_setup_regs:
  ld      a, 0x07
  ld      iy, 0x5000
  ret

po_tokens_1s07_effects:
  ld      de, msg_po_tokens_1s07
  call    print_msg_de
  ret

po_tokens_1s07_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s07: .asciz "AT "


# Test po_tokens_1s08 tests PO_TOKENS when passed A=0x08 (BASIC keyword "TAB")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "TAB ".
po_tokens_1s08_setup:
  jp      fake_reg_update1

po_tokens_1s08_setup_regs:
  ld      a, 0x08
  ld      iy, 0x5000
  ret

po_tokens_1s08_effects:
  ld      de, msg_po_tokens_1s08
  call    print_msg_de
  ret

po_tokens_1s08_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s08: .asciz "TAB "


# Test po_tokens_1s09 tests PO_TOKENS when passed A=0x09 (BASIC keyword "VAL$")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "VAL$ ".
po_tokens_1s09_setup:
  jp      fake_reg_update1

po_tokens_1s09_setup_regs:
  ld      a, 0x09
  ld      iy, 0x5000
  ret

po_tokens_1s09_effects:
  ld      de, msg_po_tokens_1s09
  call    print_msg_de
  ret

po_tokens_1s09_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s09: .asciz "VAL$ "


# Test po_tokens_1s0a tests PO_TOKENS when passed A=0x0a (BASIC keyword "CODE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CODE ".
po_tokens_1s0a_setup:
  jp      fake_reg_update1

po_tokens_1s0a_setup_regs:
  ld      a, 0x0a
  ld      iy, 0x5000
  ret

po_tokens_1s0a_effects:
  ld      de, msg_po_tokens_1s0a
  call    print_msg_de
  ret

po_tokens_1s0a_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s0a: .asciz "CODE "


# Test po_tokens_1s0b tests PO_TOKENS when passed A=0x0b (BASIC keyword "VAL")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "VAL ".
po_tokens_1s0b_setup:
  jp      fake_reg_update1

po_tokens_1s0b_setup_regs:
  ld      a, 0x0b
  ld      iy, 0x5000
  ret

po_tokens_1s0b_effects:
  ld      de, msg_po_tokens_1s0b
  call    print_msg_de
  ret

po_tokens_1s0b_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s0b: .asciz "VAL "


# Test po_tokens_1s0c tests PO_TOKENS when passed A=0x0c (BASIC keyword "LEN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LEN ".
po_tokens_1s0c_setup:
  jp      fake_reg_update1

po_tokens_1s0c_setup_regs:
  ld      a, 0x0c
  ld      iy, 0x5000
  ret

po_tokens_1s0c_effects:
  ld      de, msg_po_tokens_1s0c
  call    print_msg_de
  ret

po_tokens_1s0c_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s0c: .asciz "LEN "


# Test po_tokens_1s0d tests PO_TOKENS when passed A=0x0d (BASIC keyword "SIN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "SIN ".
po_tokens_1s0d_setup:
  jp      fake_reg_update1

po_tokens_1s0d_setup_regs:
  ld      a, 0x0d
  ld      iy, 0x5000
  ret

po_tokens_1s0d_effects:
  ld      de, msg_po_tokens_1s0d
  call    print_msg_de
  ret

po_tokens_1s0d_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s0d: .asciz "SIN "


# Test po_tokens_1s0e tests PO_TOKENS when passed A=0x0e (BASIC keyword "COS")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "COS ".
po_tokens_1s0e_setup:
  jp      fake_reg_update1

po_tokens_1s0e_setup_regs:
  ld      a, 0x0e
  ld      iy, 0x5000
  ret

po_tokens_1s0e_effects:
  ld      de, msg_po_tokens_1s0e
  call    print_msg_de
  ret

po_tokens_1s0e_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s0e: .asciz "COS "


# Test po_tokens_1s0f tests PO_TOKENS when passed A=0x0f (BASIC keyword "TAN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "TAN ".
po_tokens_1s0f_setup:
  jp      fake_reg_update1

po_tokens_1s0f_setup_regs:
  ld      a, 0x0f
  ld      iy, 0x5000
  ret

po_tokens_1s0f_effects:
  ld      de, msg_po_tokens_1s0f
  call    print_msg_de
  ret

po_tokens_1s0f_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s0f: .asciz "TAN "


# Test po_tokens_1s10 tests PO_TOKENS when passed A=0x10 (BASIC keyword "ASN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "ASN ".
po_tokens_1s10_setup:
  jp      fake_reg_update1

po_tokens_1s10_setup_regs:
  ld      a, 0x10
  ld      iy, 0x5000
  ret

po_tokens_1s10_effects:
  ld      de, msg_po_tokens_1s10
  call    print_msg_de
  ret

po_tokens_1s10_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s10: .asciz "ASN "


# Test po_tokens_1s11 tests PO_TOKENS when passed A=0x11 (BASIC keyword "ACS")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "ACS ".
po_tokens_1s11_setup:
  jp      fake_reg_update1

po_tokens_1s11_setup_regs:
  ld      a, 0x11
  ld      iy, 0x5000
  ret

po_tokens_1s11_effects:
  ld      de, msg_po_tokens_1s11
  call    print_msg_de
  ret

po_tokens_1s11_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s11: .asciz "ACS "


# Test po_tokens_1s12 tests PO_TOKENS when passed A=0x12 (BASIC keyword "ATN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "ATN ".
po_tokens_1s12_setup:
  jp      fake_reg_update1

po_tokens_1s12_setup_regs:
  ld      a, 0x12
  ld      iy, 0x5000
  ret

po_tokens_1s12_effects:
  ld      de, msg_po_tokens_1s12
  call    print_msg_de
  ret

po_tokens_1s12_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s12: .asciz "ATN "


# Test po_tokens_1s13 tests PO_TOKENS when passed A=0x13 (BASIC keyword "LN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LN ".
po_tokens_1s13_setup:
  jp      fake_reg_update1

po_tokens_1s13_setup_regs:
  ld      a, 0x13
  ld      iy, 0x5000
  ret

po_tokens_1s13_effects:
  ld      de, msg_po_tokens_1s13
  call    print_msg_de
  ret

po_tokens_1s13_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s13: .asciz "LN "


# Test po_tokens_1s14 tests PO_TOKENS when passed A=0x14 (BASIC keyword "EXP")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "EXP ".
po_tokens_1s14_setup:
  jp      fake_reg_update1

po_tokens_1s14_setup_regs:
  ld      a, 0x14
  ld      iy, 0x5000
  ret

po_tokens_1s14_effects:
  ld      de, msg_po_tokens_1s14
  call    print_msg_de
  ret

po_tokens_1s14_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s14: .asciz "EXP "


# Test po_tokens_1s15 tests PO_TOKENS when passed A=0x15 (BASIC keyword "INT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "INT ".
po_tokens_1s15_setup:
  jp      fake_reg_update1

po_tokens_1s15_setup_regs:
  ld      a, 0x15
  ld      iy, 0x5000
  ret

po_tokens_1s15_effects:
  ld      de, msg_po_tokens_1s15
  call    print_msg_de
  ret

po_tokens_1s15_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s15: .asciz "INT "


# Test po_tokens_1s16 tests PO_TOKENS when passed A=0x16 (BASIC keyword "SQR")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "SQR ".
po_tokens_1s16_setup:
  jp      fake_reg_update1

po_tokens_1s16_setup_regs:
  ld      a, 0x16
  ld      iy, 0x5000
  ret

po_tokens_1s16_effects:
  ld      de, msg_po_tokens_1s16
  call    print_msg_de
  ret

po_tokens_1s16_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s16: .asciz "SQR "


# Test po_tokens_1s17 tests PO_TOKENS when passed A=0x17 (BASIC keyword "SGN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "SGN ".
po_tokens_1s17_setup:
  jp      fake_reg_update1

po_tokens_1s17_setup_regs:
  ld      a, 0x17
  ld      iy, 0x5000
  ret

po_tokens_1s17_effects:
  ld      de, msg_po_tokens_1s17
  call    print_msg_de
  ret

po_tokens_1s17_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s17: .asciz "SGN "


# Test po_tokens_1s18 tests PO_TOKENS when passed A=0x18 (BASIC keyword "ABS")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "ABS ".
po_tokens_1s18_setup:
  jp      fake_reg_update1

po_tokens_1s18_setup_regs:
  ld      a, 0x18
  ld      iy, 0x5000
  ret

po_tokens_1s18_effects:
  ld      de, msg_po_tokens_1s18
  call    print_msg_de
  ret

po_tokens_1s18_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s18: .asciz "ABS "


# Test po_tokens_1s19 tests PO_TOKENS when passed A=0x19 (BASIC keyword "PEEK")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "PEEK ".
po_tokens_1s19_setup:
  jp      fake_reg_update1

po_tokens_1s19_setup_regs:
  ld      a, 0x19
  ld      iy, 0x5000
  ret

po_tokens_1s19_effects:
  ld      de, msg_po_tokens_1s19
  call    print_msg_de
  ret

po_tokens_1s19_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s19: .asciz "PEEK "


# Test po_tokens_1s1a tests PO_TOKENS when passed A=0x1a (BASIC keyword "IN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "IN ".
po_tokens_1s1a_setup:
  jp      fake_reg_update1

po_tokens_1s1a_setup_regs:
  ld      a, 0x1a
  ld      iy, 0x5000
  ret

po_tokens_1s1a_effects:
  ld      de, msg_po_tokens_1s1a
  call    print_msg_de
  ret

po_tokens_1s1a_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s1a: .asciz "IN "


# Test po_tokens_1s1b tests PO_TOKENS when passed A=0x1b (BASIC keyword "USR")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "USR ".
po_tokens_1s1b_setup:
  jp      fake_reg_update1

po_tokens_1s1b_setup_regs:
  ld      a, 0x1b
  ld      iy, 0x5000
  ret

po_tokens_1s1b_effects:
  ld      de, msg_po_tokens_1s1b
  call    print_msg_de
  ret

po_tokens_1s1b_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s1b: .asciz "USR "


# Test po_tokens_1s1c tests PO_TOKENS when passed A=0x1c (BASIC keyword "STR$")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "STR$ ".
po_tokens_1s1c_setup:
  jp      fake_reg_update1

po_tokens_1s1c_setup_regs:
  ld      a, 0x1c
  ld      iy, 0x5000
  ret

po_tokens_1s1c_effects:
  ld      de, msg_po_tokens_1s1c
  call    print_msg_de
  ret

po_tokens_1s1c_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s1c: .asciz "STR$ "


# Test po_tokens_1s1d tests PO_TOKENS when passed A=0x1d (BASIC keyword "CHR$")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CHR$ ".
po_tokens_1s1d_setup:
  jp      fake_reg_update1

po_tokens_1s1d_setup_regs:
  ld      a, 0x1d
  ld      iy, 0x5000
  ret

po_tokens_1s1d_effects:
  ld      de, msg_po_tokens_1s1d
  call    print_msg_de
  ret

po_tokens_1s1d_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s1d: .asciz "CHR$ "


# Test po_tokens_1s1e tests PO_TOKENS when passed A=0x1e (BASIC keyword "NOT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "NOT ".
po_tokens_1s1e_setup:
  jp      fake_reg_update1

po_tokens_1s1e_setup_regs:
  ld      a, 0x1e
  ld      iy, 0x5000
  ret

po_tokens_1s1e_effects:
  ld      de, msg_po_tokens_1s1e
  call    print_msg_de
  ret

po_tokens_1s1e_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s1e: .asciz "NOT "


# Test po_tokens_1s1f tests PO_TOKENS when passed A=0x1f (BASIC keyword "BIN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "BIN ".
po_tokens_1s1f_setup:
  jp      fake_reg_update1

po_tokens_1s1f_setup_regs:
  ld      a, 0x1f
  ld      iy, 0x5000
  ret

po_tokens_1s1f_effects:
  ld      de, msg_po_tokens_1s1f
  call    print_msg_de
  ret

po_tokens_1s1f_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s1f: .asciz "BIN "


# Test po_tokens_1s20 tests PO_TOKENS when passed A=0x20 (BASIC keyword "OR")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "OR ".
po_tokens_1s20_setup:
  jp      fake_reg_update1

po_tokens_1s20_setup_regs:
  ld      a, 0x20
  ld      iy, 0x5000
  ret

po_tokens_1s20_effects:
  ld      de, msg_po_tokens_1s20
  call    print_msg_de
  ret

po_tokens_1s20_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s20: .asciz "OR "


# Test po_tokens_1s21 tests PO_TOKENS when passed A=0x21 (BASIC keyword "AND")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "AND ".
po_tokens_1s21_setup:
  jp      fake_reg_update1

po_tokens_1s21_setup_regs:
  ld      a, 0x21
  ld      iy, 0x5000
  ret

po_tokens_1s21_effects:
  ld      de, msg_po_tokens_1s21
  call    print_msg_de
  ret

po_tokens_1s21_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s21: .asciz "AND "


# Test po_tokens_1s22 tests PO_TOKENS when passed A=0x22 (BASIC keyword "<=")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "<=".
po_tokens_1s22_setup:
  jp      fake_reg_update1

po_tokens_1s22_setup_regs:
  ld      a, 0x22
  ld      iy, 0x5000
  ret

po_tokens_1s22_effects:
  ld      de, msg_po_tokens_1s22
  call    print_msg_de
  ret

po_tokens_1s22_effects_regs:
  push    af
  pop     de
  ld      a, 0x7a
  ldf     C_FLAG|N_FLAG|PV_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s22: .asciz "<="


# Test po_tokens_1s23 tests PO_TOKENS when passed A=0x23 (BASIC keyword ">=")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is ">=".
po_tokens_1s23_setup:
  jp      fake_reg_update1

po_tokens_1s23_setup_regs:
  ld      a, 0x23
  ld      iy, 0x5000
  ret

po_tokens_1s23_effects:
  ld      de, msg_po_tokens_1s23
  call    print_msg_de
  ret

po_tokens_1s23_effects_regs:
  push    af
  pop     de
  ld      a, 0x7a
  ldf     C_FLAG|N_FLAG|PV_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s23: .asciz ">="


# Test po_tokens_1s24 tests PO_TOKENS when passed A=0x24 (BASIC keyword "<>")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "<>".
po_tokens_1s24_setup:
  jp      fake_reg_update1

po_tokens_1s24_setup_regs:
  ld      a, 0x24
  ld      iy, 0x5000
  ret

po_tokens_1s24_effects:
  ld      de, msg_po_tokens_1s24
  call    print_msg_de
  ret

po_tokens_1s24_effects_regs:
  push    af
  pop     de
  ld      a, 0x7c
  ldf     C_FLAG|N_FLAG|PV_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s24: .asciz "<>"


# Test po_tokens_1s25 tests PO_TOKENS when passed A=0x25 (BASIC keyword "LINE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LINE ".
po_tokens_1s25_setup:
  jp      fake_reg_update1

po_tokens_1s25_setup_regs:
  ld      a, 0x25
  ld      iy, 0x5000
  ret

po_tokens_1s25_effects:
  ld      de, msg_po_tokens_1s25
  call    print_msg_de
  ret

po_tokens_1s25_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s25: .asciz "LINE "


# Test po_tokens_1s26 tests PO_TOKENS when passed A=0x26 (BASIC keyword "THEN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "THEN ".
po_tokens_1s26_setup:
  jp      fake_reg_update1

po_tokens_1s26_setup_regs:
  ld      a, 0x26
  ld      iy, 0x5000
  ret

po_tokens_1s26_effects:
  ld      de, msg_po_tokens_1s26
  call    print_msg_de
  ret

po_tokens_1s26_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s26: .asciz "THEN "


# Test po_tokens_1s27 tests PO_TOKENS when passed A=0x27 (BASIC keyword "TO")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "TO ".
po_tokens_1s27_setup:
  jp      fake_reg_update1

po_tokens_1s27_setup_regs:
  ld      a, 0x27
  ld      iy, 0x5000
  ret

po_tokens_1s27_effects:
  ld      de, msg_po_tokens_1s27
  call    print_msg_de
  ret

po_tokens_1s27_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s27: .asciz "TO "


# Test po_tokens_1s28 tests PO_TOKENS when passed A=0x28 (BASIC keyword "STEP")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "STEP ".
po_tokens_1s28_setup:
  jp      fake_reg_update1

po_tokens_1s28_setup_regs:
  ld      a, 0x28
  ld      iy, 0x5000
  ret

po_tokens_1s28_effects:
  ld      de, msg_po_tokens_1s28
  call    print_msg_de
  ret

po_tokens_1s28_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s28: .asciz "STEP "


# Test po_tokens_1s29 tests PO_TOKENS when passed A=0x29 (BASIC keyword "DEF FN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "DEF FN ".
po_tokens_1s29_setup:
  jp      fake_reg_update1

po_tokens_1s29_setup_regs:
  ld      a, 0x29
  ld      iy, 0x5000
  ret

po_tokens_1s29_effects:
  ld      de, msg_po_tokens_1s29
  call    print_msg_de
  ret

po_tokens_1s29_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s29: .asciz "DEF FN "


# Test po_tokens_1s2a tests PO_TOKENS when passed A=0x2a (BASIC keyword "CAT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CAT ".
po_tokens_1s2a_setup:
  jp      fake_reg_update1

po_tokens_1s2a_setup_regs:
  ld      a, 0x2a
  ld      iy, 0x5000
  ret

po_tokens_1s2a_effects:
  ld      de, msg_po_tokens_1s2a
  call    print_msg_de
  ret

po_tokens_1s2a_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s2a: .asciz "CAT "


# Test po_tokens_1s2b tests PO_TOKENS when passed A=0x2b (BASIC keyword "FORMAT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "FORMAT ".
po_tokens_1s2b_setup:
  jp      fake_reg_update1

po_tokens_1s2b_setup_regs:
  ld      a, 0x2b
  ld      iy, 0x5000
  ret

po_tokens_1s2b_effects:
  ld      de, msg_po_tokens_1s2b
  call    print_msg_de
  ret

po_tokens_1s2b_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s2b: .asciz "FORMAT "


# Test po_tokens_1s2c tests PO_TOKENS when passed A=0x2c (BASIC keyword "MOVE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "MOVE ".
po_tokens_1s2c_setup:
  jp      fake_reg_update1

po_tokens_1s2c_setup_regs:
  ld      a, 0x2c
  ld      iy, 0x5000
  ret

po_tokens_1s2c_effects:
  ld      de, msg_po_tokens_1s2c
  call    print_msg_de
  ret

po_tokens_1s2c_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s2c: .asciz "MOVE "


# Test po_tokens_1s2d tests PO_TOKENS when passed A=0x2d (BASIC keyword "ERASE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "ERASE ".
po_tokens_1s2d_setup:
  jp      fake_reg_update1

po_tokens_1s2d_setup_regs:
  ld      a, 0x2d
  ld      iy, 0x5000
  ret

po_tokens_1s2d_effects:
  ld      de, msg_po_tokens_1s2d
  call    print_msg_de
  ret

po_tokens_1s2d_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s2d: .asciz "ERASE "


# Test po_tokens_1s2e tests PO_TOKENS when passed A=0x2e (BASIC keyword "OPEN #")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "OPEN #".
po_tokens_1s2e_setup:
  jp      fake_reg_update1

po_tokens_1s2e_setup_regs:
  ld      a, 0x2e
  ld      iy, 0x5000
  ret

po_tokens_1s2e_effects:
  ld      de, msg_po_tokens_1s2e
  call    print_msg_de
  ret

po_tokens_1s2e_effects_regs:
  push    af
  pop     de
  ld      a, 0x46
  ldf     C_FLAG|N_FLAG|PV_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s2e: .asciz "OPEN #"


# Test po_tokens_1s2f tests PO_TOKENS when passed A=0x2f (BASIC keyword "CLOSE #")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CLOSE #".
po_tokens_1s2f_setup:
  jp      fake_reg_update1

po_tokens_1s2f_setup_regs:
  ld      a, 0x2f
  ld      iy, 0x5000
  ret

po_tokens_1s2f_effects:
  ld      de, msg_po_tokens_1s2f
  call    print_msg_de
  ret

po_tokens_1s2f_effects_regs:
  push    af
  pop     de
  ld      a, 0x46
  ldf     C_FLAG|N_FLAG|PV_FLAG|S_FLAG
  push    af
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  pop     af
  ret

msg_po_tokens_1s2f: .asciz "CLOSE #"


# Test po_tokens_1s30 tests PO_TOKENS when passed A=0x30 (BASIC keyword "MERGE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "MERGE ".
po_tokens_1s30_setup:
  jp      fake_reg_update1

po_tokens_1s30_setup_regs:
  ld      a, 0x30
  ld      iy, 0x5000
  ret

po_tokens_1s30_effects:
  ld      de, msg_po_tokens_1s30
  call    print_msg_de
  ret

po_tokens_1s30_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s30: .asciz "MERGE "


# Test po_tokens_1s31 tests PO_TOKENS when passed A=0x31 (BASIC keyword "VERIFY")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "VERIFY ".
po_tokens_1s31_setup:
  jp      fake_reg_update1

po_tokens_1s31_setup_regs:
  ld      a, 0x31
  ld      iy, 0x5000
  ret

po_tokens_1s31_effects:
  ld      de, msg_po_tokens_1s31
  call    print_msg_de
  ret

po_tokens_1s31_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s31: .asciz "VERIFY "


# Test po_tokens_1s32 tests PO_TOKENS when passed A=0x32 (BASIC keyword "BEEP")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "BEEP ".
po_tokens_1s32_setup:
  jp      fake_reg_update1

po_tokens_1s32_setup_regs:
  ld      a, 0x32
  ld      iy, 0x5000
  ret

po_tokens_1s32_effects:
  ld      de, msg_po_tokens_1s32
  call    print_msg_de
  ret

po_tokens_1s32_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s32: .asciz "BEEP "


# Test po_tokens_1s33 tests PO_TOKENS when passed A=0x33 (BASIC keyword "CIRCLE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CIRCLE ".
po_tokens_1s33_setup:
  jp      fake_reg_update1

po_tokens_1s33_setup_regs:
  ld      a, 0x33
  ld      iy, 0x5000
  ret

po_tokens_1s33_effects:
  ld      de, msg_po_tokens_1s33
  call    print_msg_de
  ret

po_tokens_1s33_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s33: .asciz "CIRCLE "


# Test po_tokens_1s34 tests PO_TOKENS when passed A=0x34 (BASIC keyword "INK")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "INK ".
po_tokens_1s34_setup:
  jp      fake_reg_update1

po_tokens_1s34_setup_regs:
  ld      a, 0x34
  ld      iy, 0x5000
  ret

po_tokens_1s34_effects:
  ld      de, msg_po_tokens_1s34
  call    print_msg_de
  ret

po_tokens_1s34_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s34: .asciz "INK "


# Test po_tokens_1s35 tests PO_TOKENS when passed A=0x35 (BASIC keyword "PAPER")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "PAPER ".
po_tokens_1s35_setup:
  jp      fake_reg_update1

po_tokens_1s35_setup_regs:
  ld      a, 0x35
  ld      iy, 0x5000
  ret

po_tokens_1s35_effects:
  ld      de, msg_po_tokens_1s35
  call    print_msg_de
  ret

po_tokens_1s35_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s35: .asciz "PAPER "


# Test po_tokens_1s36 tests PO_TOKENS when passed A=0x36 (BASIC keyword "FLASH")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "FLASH ".
po_tokens_1s36_setup:
  jp      fake_reg_update1

po_tokens_1s36_setup_regs:
  ld      a, 0x36
  ld      iy, 0x5000
  ret

po_tokens_1s36_effects:
  ld      de, msg_po_tokens_1s36
  call    print_msg_de
  ret

po_tokens_1s36_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s36: .asciz "FLASH "


# Test po_tokens_1s37 tests PO_TOKENS when passed A=0x37 (BASIC keyword "BRIGHT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "BRIGHT ".
po_tokens_1s37_setup:
  jp      fake_reg_update1

po_tokens_1s37_setup_regs:
  ld      a, 0x37
  ld      iy, 0x5000
  ret

po_tokens_1s37_effects:
  ld      de, msg_po_tokens_1s37
  call    print_msg_de
  ret

po_tokens_1s37_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s37: .asciz "BRIGHT "


# Test po_tokens_1s38 tests PO_TOKENS when passed A=0x38 (BASIC keyword "INVERSE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "INVERSE ".
po_tokens_1s38_setup:
  jp      fake_reg_update1

po_tokens_1s38_setup_regs:
  ld      a, 0x38
  ld      iy, 0x5000
  ret

po_tokens_1s38_effects:
  ld      de, msg_po_tokens_1s38
  call    print_msg_de
  ret

po_tokens_1s38_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s38: .asciz "INVERSE "


# Test po_tokens_1s39 tests PO_TOKENS when passed A=0x39 (BASIC keyword "OVER")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "OVER ".
po_tokens_1s39_setup:
  jp      fake_reg_update1

po_tokens_1s39_setup_regs:
  ld      a, 0x39
  ld      iy, 0x5000
  ret

po_tokens_1s39_effects:
  ld      de, msg_po_tokens_1s39
  call    print_msg_de
  ret

po_tokens_1s39_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s39: .asciz "OVER "


# Test po_tokens_1s3a tests PO_TOKENS when passed A=0x3a (BASIC keyword "OUT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "OUT ".
po_tokens_1s3a_setup:
  jp      fake_reg_update1

po_tokens_1s3a_setup_regs:
  ld      a, 0x3a
  ld      iy, 0x5000
  ret

po_tokens_1s3a_effects:
  ld      de, msg_po_tokens_1s3a
  call    print_msg_de
  ret

po_tokens_1s3a_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s3a: .asciz "OUT "


# Test po_tokens_1s3b tests PO_TOKENS when passed A=0x3b (BASIC keyword "LPRINT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LPRINT ".
po_tokens_1s3b_setup:
  jp      fake_reg_update1

po_tokens_1s3b_setup_regs:
  ld      a, 0x3b
  ld      iy, 0x5000
  ret

po_tokens_1s3b_effects:
  ld      de, msg_po_tokens_1s3b
  call    print_msg_de
  ret

po_tokens_1s3b_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s3b: .asciz "LPRINT "


# Test po_tokens_1s3c tests PO_TOKENS when passed A=0x3c (BASIC keyword "LLIST")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LLIST ".
po_tokens_1s3c_setup:
  jp      fake_reg_update1

po_tokens_1s3c_setup_regs:
  ld      a, 0x3c
  ld      iy, 0x5000
  ret

po_tokens_1s3c_effects:
  ld      de, msg_po_tokens_1s3c
  call    print_msg_de
  ret

po_tokens_1s3c_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s3c: .asciz "LLIST "


# Test po_tokens_1s3d tests PO_TOKENS when passed A=0x3d (BASIC keyword "STOP")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "STOP ".
po_tokens_1s3d_setup:
  jp      fake_reg_update1

po_tokens_1s3d_setup_regs:
  ld      a, 0x3d
  ld      iy, 0x5000
  ret

po_tokens_1s3d_effects:
  ld      de, msg_po_tokens_1s3d
  call    print_msg_de
  ret

po_tokens_1s3d_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s3d: .asciz "STOP "


# Test po_tokens_1s3e tests PO_TOKENS when passed A=0x3e (BASIC keyword "READ")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "READ ".
po_tokens_1s3e_setup:
  jp      fake_reg_update1

po_tokens_1s3e_setup_regs:
  ld      a, 0x3e
  ld      iy, 0x5000
  ret

po_tokens_1s3e_effects:
  ld      de, msg_po_tokens_1s3e
  call    print_msg_de
  ret

po_tokens_1s3e_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s3e: .asciz "READ "


# Test po_tokens_1s3f tests PO_TOKENS when passed A=0x3f (BASIC keyword "DATA")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "DATA ".
po_tokens_1s3f_setup:
  jp      fake_reg_update1

po_tokens_1s3f_setup_regs:
  ld      a, 0x3f
  ld      iy, 0x5000
  ret

po_tokens_1s3f_effects:
  ld      de, msg_po_tokens_1s3f
  call    print_msg_de
  ret

po_tokens_1s3f_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s3f: .asciz "DATA "


# Test po_tokens_1s40 tests PO_TOKENS when passed A=0x40 (BASIC keyword "RESTORE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "RESTORE ".
po_tokens_1s40_setup:
  jp      fake_reg_update1

po_tokens_1s40_setup_regs:
  ld      a, 0x40
  ld      iy, 0x5000
  ret

po_tokens_1s40_effects:
  ld      de, msg_po_tokens_1s40
  call    print_msg_de
  ret

po_tokens_1s40_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s40: .asciz "RESTORE "


# Test po_tokens_1s41 tests PO_TOKENS when passed A=0x41 (BASIC keyword "NEW")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "NEW ".
po_tokens_1s41_setup:
  jp      fake_reg_update1

po_tokens_1s41_setup_regs:
  ld      a, 0x41
  ld      iy, 0x5000
  ret

po_tokens_1s41_effects:
  ld      de, msg_po_tokens_1s41
  call    print_msg_de
  ret

po_tokens_1s41_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s41: .asciz "NEW "


# Test po_tokens_1s42 tests PO_TOKENS when passed A=0x42 (BASIC keyword "BORDER")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "BORDER ".
po_tokens_1s42_setup:
  jp      fake_reg_update1

po_tokens_1s42_setup_regs:
  ld      a, 0x42
  ld      iy, 0x5000
  ret

po_tokens_1s42_effects:
  ld      de, msg_po_tokens_1s42
  call    print_msg_de
  ret

po_tokens_1s42_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s42: .asciz "BORDER "


# Test po_tokens_1s43 tests PO_TOKENS when passed A=0x43 (BASIC keyword "CONTINUE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CONTINUE ".
po_tokens_1s43_setup:
  jp      fake_reg_update1

po_tokens_1s43_setup_regs:
  ld      a, 0x43
  ld      iy, 0x5000
  ret

po_tokens_1s43_effects:
  ld      de, msg_po_tokens_1s43
  call    print_msg_de
  ret

po_tokens_1s43_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s43: .asciz "CONTINUE "


# Test po_tokens_1s44 tests PO_TOKENS when passed A=0x44 (BASIC keyword "DIM")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "DIM ".
po_tokens_1s44_setup:
  jp      fake_reg_update1

po_tokens_1s44_setup_regs:
  ld      a, 0x44
  ld      iy, 0x5000
  ret

po_tokens_1s44_effects:
  ld      de, msg_po_tokens_1s44
  call    print_msg_de
  ret

po_tokens_1s44_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s44: .asciz "DIM "


# Test po_tokens_1s45 tests PO_TOKENS when passed A=0x45 (BASIC keyword "REM")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "REM ".
po_tokens_1s45_setup:
  jp      fake_reg_update1

po_tokens_1s45_setup_regs:
  ld      a, 0x45
  ld      iy, 0x5000
  ret

po_tokens_1s45_effects:
  ld      de, msg_po_tokens_1s45
  call    print_msg_de
  ret

po_tokens_1s45_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s45: .asciz "REM "


# Test po_tokens_1s46 tests PO_TOKENS when passed A=0x46 (BASIC keyword "FOR")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "FOR ".
po_tokens_1s46_setup:
  jp      fake_reg_update1

po_tokens_1s46_setup_regs:
  ld      a, 0x46
  ld      iy, 0x5000
  ret

po_tokens_1s46_effects:
  ld      de, msg_po_tokens_1s46
  call    print_msg_de
  ret

po_tokens_1s46_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s46: .asciz "FOR "


# Test po_tokens_1s47 tests PO_TOKENS when passed A=0x47 (BASIC keyword "GO TO")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "GO TO ".
po_tokens_1s47_setup:
  jp      fake_reg_update1

po_tokens_1s47_setup_regs:
  ld      a, 0x47
  ld      iy, 0x5000
  ret

po_tokens_1s47_effects:
  ld      de, msg_po_tokens_1s47
  call    print_msg_de
  ret

po_tokens_1s47_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s47: .asciz "GO TO "


# Test po_tokens_1s48 tests PO_TOKENS when passed A=0x48 (BASIC keyword "GO SUB")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "GO SUB ".
po_tokens_1s48_setup:
  jp      fake_reg_update1

po_tokens_1s48_setup_regs:
  ld      a, 0x48
  ld      iy, 0x5000
  ret

po_tokens_1s48_effects:
  ld      de, msg_po_tokens_1s48
  call    print_msg_de
  ret

po_tokens_1s48_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s48: .asciz "GO SUB "


# Test po_tokens_1s49 tests PO_TOKENS when passed A=0x49 (BASIC keyword "INPUT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "INPUT ".
po_tokens_1s49_setup:
  jp      fake_reg_update1

po_tokens_1s49_setup_regs:
  ld      a, 0x49
  ld      iy, 0x5000
  ret

po_tokens_1s49_effects:
  ld      de, msg_po_tokens_1s49
  call    print_msg_de
  ret

po_tokens_1s49_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s49: .asciz "INPUT "


# Test po_tokens_1s4a tests PO_TOKENS when passed A=0x4a (BASIC keyword "LOAD")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LOAD ".
po_tokens_1s4a_setup:
  jp      fake_reg_update1

po_tokens_1s4a_setup_regs:
  ld      a, 0x4a
  ld      iy, 0x5000
  ret

po_tokens_1s4a_effects:
  ld      de, msg_po_tokens_1s4a
  call    print_msg_de
  ret

po_tokens_1s4a_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s4a: .asciz "LOAD "


# Test po_tokens_1s4b tests PO_TOKENS when passed A=0x4b (BASIC keyword "LIST")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LIST ".
po_tokens_1s4b_setup:
  jp      fake_reg_update1

po_tokens_1s4b_setup_regs:
  ld      a, 0x4b
  ld      iy, 0x5000
  ret

po_tokens_1s4b_effects:
  ld      de, msg_po_tokens_1s4b
  call    print_msg_de
  ret

po_tokens_1s4b_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s4b: .asciz "LIST "


# Test po_tokens_1s4c tests PO_TOKENS when passed A=0x4c (BASIC keyword "LET")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "LET ".
po_tokens_1s4c_setup:
  jp      fake_reg_update1

po_tokens_1s4c_setup_regs:
  ld      a, 0x4c
  ld      iy, 0x5000
  ret

po_tokens_1s4c_effects:
  ld      de, msg_po_tokens_1s4c
  call    print_msg_de
  ret

po_tokens_1s4c_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s4c: .asciz "LET "


# Test po_tokens_1s4d tests PO_TOKENS when passed A=0x4d (BASIC keyword "PAUSE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "PAUSE ".
po_tokens_1s4d_setup:
  jp      fake_reg_update1

po_tokens_1s4d_setup_regs:
  ld      a, 0x4d
  ld      iy, 0x5000
  ret

po_tokens_1s4d_effects:
  ld      de, msg_po_tokens_1s4d
  call    print_msg_de
  ret

po_tokens_1s4d_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s4d: .asciz "PAUSE "


# Test po_tokens_1s4e tests PO_TOKENS when passed A=0x4e (BASIC keyword "NEXT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "NEXT ".
po_tokens_1s4e_setup:
  jp      fake_reg_update1

po_tokens_1s4e_setup_regs:
  ld      a, 0x4e
  ld      iy, 0x5000
  ret

po_tokens_1s4e_effects:
  ld      de, msg_po_tokens_1s4e
  call    print_msg_de
  ret

po_tokens_1s4e_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s4e: .asciz "NEXT "


# Test po_tokens_1s4f tests PO_TOKENS when passed A=0x4f (BASIC keyword "POKE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "POKE ".
po_tokens_1s4f_setup:
  jp      fake_reg_update1

po_tokens_1s4f_setup_regs:
  ld      a, 0x4f
  ld      iy, 0x5000
  ret

po_tokens_1s4f_effects:
  ld      de, msg_po_tokens_1s4f
  call    print_msg_de
  ret

po_tokens_1s4f_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s4f: .asciz "POKE "


# Test po_tokens_1s50 tests PO_TOKENS when passed A=0x50 (BASIC keyword "PRINT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "PRINT ".
po_tokens_1s50_setup:
  jp      fake_reg_update1

po_tokens_1s50_setup_regs:
  ld      a, 0x50
  ld      iy, 0x5000
  ret

po_tokens_1s50_effects:
  ld      de, msg_po_tokens_1s50
  call    print_msg_de
  ret

po_tokens_1s50_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s50: .asciz "PRINT "


# Test po_tokens_1s51 tests PO_TOKENS when passed A=0x51 (BASIC keyword "PLOT")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "PLOT ".
po_tokens_1s51_setup:
  jp      fake_reg_update1

po_tokens_1s51_setup_regs:
  ld      a, 0x51
  ld      iy, 0x5000
  ret

po_tokens_1s51_effects:
  ld      de, msg_po_tokens_1s51
  call    print_msg_de
  ret

po_tokens_1s51_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s51: .asciz "PLOT "


# Test po_tokens_1s52 tests PO_TOKENS when passed A=0x52 (BASIC keyword "RUN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "RUN ".
po_tokens_1s52_setup:
  jp      fake_reg_update1

po_tokens_1s52_setup_regs:
  ld      a, 0x52
  ld      iy, 0x5000
  ret

po_tokens_1s52_effects:
  ld      de, msg_po_tokens_1s52
  call    print_msg_de
  ret

po_tokens_1s52_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s52: .asciz "RUN "


# Test po_tokens_1s53 tests PO_TOKENS when passed A=0x53 (BASIC keyword "SAVE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "SAVE ".
po_tokens_1s53_setup:
  jp      fake_reg_update1

po_tokens_1s53_setup_regs:
  ld      a, 0x53
  ld      iy, 0x5000
  ret

po_tokens_1s53_effects:
  ld      de, msg_po_tokens_1s53
  call    print_msg_de
  ret

po_tokens_1s53_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s53: .asciz "SAVE "


# Test po_tokens_1s54 tests PO_TOKENS when passed A=0x54 (BASIC keyword "RANDOMIZE")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "RANDOMIZE ".
po_tokens_1s54_setup:
  jp      fake_reg_update1

po_tokens_1s54_setup_regs:
  ld      a, 0x54
  ld      iy, 0x5000
  ret

po_tokens_1s54_effects:
  ld      de, msg_po_tokens_1s54
  call    print_msg_de
  ret

po_tokens_1s54_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s54: .asciz "RANDOMIZE "


# Test po_tokens_1s55 tests PO_TOKENS when passed A=0x55 (BASIC keyword "IF")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "IF ".
po_tokens_1s55_setup:
  jp      fake_reg_update1

po_tokens_1s55_setup_regs:
  ld      a, 0x55
  ld      iy, 0x5000
  ret

po_tokens_1s55_effects:
  ld      de, msg_po_tokens_1s55
  call    print_msg_de
  ret

po_tokens_1s55_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s55: .asciz "IF "


# Test po_tokens_1s56 tests PO_TOKENS when passed A=0x56 (BASIC keyword "CLS")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CLS ".
po_tokens_1s56_setup:
  jp      fake_reg_update1

po_tokens_1s56_setup_regs:
  ld      a, 0x56
  ld      iy, 0x5000
  ret

po_tokens_1s56_effects:
  ld      de, msg_po_tokens_1s56
  call    print_msg_de
  ret

po_tokens_1s56_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s56: .asciz "CLS "


# Test po_tokens_1s57 tests PO_TOKENS when passed A=0x57 (BASIC keyword "DRAW")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "DRAW ".
po_tokens_1s57_setup:
  jp      fake_reg_update1

po_tokens_1s57_setup_regs:
  ld      a, 0x57
  ld      iy, 0x5000
  ret

po_tokens_1s57_effects:
  ld      de, msg_po_tokens_1s57
  call    print_msg_de
  ret

po_tokens_1s57_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s57: .asciz "DRAW "


# Test po_tokens_1s58 tests PO_TOKENS when passed A=0x58 (BASIC keyword "CLEAR")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "CLEAR ".
po_tokens_1s58_setup:
  jp      fake_reg_update1

po_tokens_1s58_setup_regs:
  ld      a, 0x58
  ld      iy, 0x5000
  ret

po_tokens_1s58_effects:
  ld      de, msg_po_tokens_1s58
  call    print_msg_de
  ret

po_tokens_1s58_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s58: .asciz "CLEAR "


# Test po_tokens_1s59 tests PO_TOKENS when passed A=0x59 (BASIC keyword "RETURN")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "RETURN ".
po_tokens_1s59_setup:
  jp      fake_reg_update1

po_tokens_1s59_setup_regs:
  ld      a, 0x59
  ld      iy, 0x5000
  ret

po_tokens_1s59_effects:
  ld      de, msg_po_tokens_1s59
  call    print_msg_de
  ret

po_tokens_1s59_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s59: .asciz "RETURN "


# Test po_tokens_1s5a tests PO_TOKENS when passed A=0x5a (BASIC keyword "COPY")
# with bit 0 of [IY+1] set to 1 (leading space suppressed) when used with
# a mock print-out routine that disturbs all registers in the register file.
# Expected output is "COPY ".
po_tokens_1s5a_setup:
  jp      fake_reg_update1

po_tokens_1s5a_setup_regs:
  ld      a, 0x5a
  ld      iy, 0x5000
  ret

po_tokens_1s5a_effects:
  ld      de, msg_po_tokens_1s5a
  call    print_msg_de
  ret

po_tokens_1s5a_effects_regs:
  push    af
  pop     de
  push    de
  push    hl
  call    touch_all_registers
  pop     hl
  pop     de
  ret

msg_po_tokens_1s5a: .asciz "COPY "
