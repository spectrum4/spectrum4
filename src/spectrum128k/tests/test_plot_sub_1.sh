#!/usr/bin/env bash

# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

set -eu
set -o pipefail
export SHELLOPTS

cd "$(dirname "${0}")"

{

  echo '# This file is part of the Spectrum +4 Project.'
  echo '# Licencing information can be found in the LICENCE file'
  echo '# (C) 2021 Spectrum +4 Authors. All rights reserved.'
  echo
  echo "# This file is auto-generated by ${0##*/}." 'DO NOT EDIT!'
  echo
  echo
  echo '.text'

  i=0
  while [ $i -lt 16 ]; do
    x=$((RANDOM % 0x100))
    y=$((RANDOM % 0x100))
    p_flag=$((RANDOM % 0x100))
    attr_t=$((RANDOM % 0x100))
    mask_t=$((RANDOM % 0x100))
    df_screen=$((RANDOM % 0x100))
    af_screen=$((RANDOM % 0x100))
    if [ $x -lt 256 ] && [ $y -lt 176 ]; then
      printf '%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x\n' $i $x $y $p_flag $attr_t $mask_t $df_screen $af_screen
      i=$((i + 1))
    fi
  done | while read i x y p_flag attr_t mask_t df_screen af_screen; do
    testname="plot_sub_1_${i}"
    df_offset="$(printf '0x%04x\n' $((32 * (8 * (8 * ((175 - y) / 64) + ((175 - y) & 0x07)) + ((175 - y) % 64 >> 3)) + x / 8)))"
    af_offset="$(printf '0x%04x\n' $((32 * ((175 - y) / 8) + x / 8)))"
    over="$((p_flag & 0x01))"
    inverse="$(((p_flag & 0x04) >> 2))"
    ink9="$(((p_flag & 0x10) >> 4))"
    paper9="$(((p_flag & 0x40) >> 6))"
    bit="$(((255 - x) & 0x07))"
    mask="$((2 ** bit))"
    inv_mask="$(printf '0x%02x\n' $((255 - mask)))"
    af="$(printf '0x%02x\n' $(((af_screen ^ attr_t) & mask_t ^ attr_t)))"
    if [ "${paper9}" == 1 ]; then
      i_msb=$(((af & 0x04) >> 2))
      paper=$(((1 - i_msb) * 56))
      af="$(printf '0x%02x\n' $(((af & 0xc7) | paper)))"
    fi
    if [ "${ink9}" == 1 ]; then
      p_msb=$(((af & 0x20) >> 5))
      ink=$(((1 - p_msb) * 7))
      af="$(printf '0x%02x\n' $(((af & 0xf8) | ink)))"
    fi
    case "${over}${inverse}" in
      00)
        df="$(printf '0x%02x\n' $((df_screen | mask)))"
        ;;
      01)
        df="$(printf '0x%02x\n' $((df_screen & inv_mask)))"
        ;;
      10)
        df="$(printf '0x%02x\n' $((df_screen ^ mask)))"
        ;;
      11)
        df="$(printf '0x%02x\n' $((df_screen)))"
        ;;
    esac
    echo
    echo
    echo "${testname}_setup_regs:"
    echo "  ld    b, ${y}"
    echo "  ld    c, ${x}"
    echo "  ret"
    echo
    echo "${testname}_setup:"
    echo "  _strb ${p_flag}, P_FLAG"
    echo "  _strb ${attr_t}, ATTR_T"
    echo "  _strb ${mask_t}, MASK_T"
    echo "  _strb ${df_screen}, display_file + ${df_offset}"
    echo "  _strb ${af_screen}, attributes_file + ${af_offset}"
    echo "  ret"
    echo
    echo "${testname}_effects_regs:"
    echo "  call  plot_sub_1        ; F is very complicated to calculate; this avoids needing to calculate it"
    echo "  ld    a, ${af}"
    echo "  ld    b, ${inv_mask}"
    echo "  ld    c, ${p_flag}"
    echo "  ld    d, ${mask_t}"
    echo "  ld    e, ${attr_t}"
    echo "  ld    hl, attributes_file + ${af_offset}"
    echo "  ret"
    echo
    echo "${testname}_effects:"
    echo "  _strb ${df}, display_file + ${df_offset}"
    echo "  _strb ${af}, attributes_file + ${af_offset}"
    echo "  ret"
  done
} | ../../../utils/asm-format/asm-format > "test_plot_sub_1.gen-s"
