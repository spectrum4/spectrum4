#!/usr/bin/env bash

# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

set -eu
set -o pipefail
export SHELLOPTS


function join_by { local IFS="$1"; shift; echo "$*"; }

function sub_flags {
  local a="${1}"
  local b="${2}"
  if [ "${b}" -gt "${a}" ]; then
    local c=$((a+256-b))
  else
    local c="$((a-b))"
  fi
  local result=()
  hexa=$(printf "%02x" $a)
  hexb=$(printf "%02x" $b)
  hexc=$(printf "%02x" $c)
  if [ "${b}" -gt "${a}" ]; then
    result+=("C_FLAG")
  fi
  result+=("N_FLAG")
  if [ "${a}" -lt 128 ] && [ "${b}" -ge 128 ] && [ "${c}" -ge 128 ]; then
    result+=("PV_FLAG")
  fi
  if [ "${a}" -ge 128 ] && [ "${b}" -lt 128 ] && [ "${c}" -lt 128 ]; then
    result+=("PV_FLAG")
  fi
  if [[ "${hexb:1:1}" > "${hexa:1:1}" ]]; then
    result+=("H_FLAG")
  fi
  if [ "${c}" == "0" ]; then
      result+=("Z_FLAG")
  fi
  case "${hexc:0:1}" in
    8 | 9 | a | b | c | d | e | f)
      result+=("S_FLAG")
      ;;
  esac
  case "${hexc:1:1}" in
    8 | 9 | a | b | c | d | e | f)
      result+=("X3_FLAG")
      ;;
  esac
  case "${hexc:0:1}" in
    2 | 3 | 6 | 7 | a | b | e | f)
      result+=("X5_FLAG")
      ;;
  esac

  join_by '|' "${result[@]}"
}

keywords=(
  "RND"
  "INKEY$"
  "PI"
  "FN"
  "POINT"
  "SCREEN$"
  "ATTR"
  "AT"
  "TAB"
  "VAL$"
  "CODE"
  "VAL"
  "LEN"
  "SIN"
  "COS"
  "TAN"
  "ASN"
  "ACS"
  "ATN"
  "LN"
  "EXP"
  "INT"
  "SQR"
  "SGN"
  "ABS"
  "PEEK"
  "IN"
  "USR"
  "STR$"
  "CHR$"
  "NOT"
  "BIN"
  "OR"
  "AND"
  "<="
  ">="
  "<>"
  "LINE"
  "THEN"
  "TO"
  "STEP"
  "DEF FN"
  "CAT"
  "FORMAT"
  "MOVE"
  "ERASE"
  "OPEN #"
  "CLOSE #"
  "MERGE"
  "VERIFY"
  "BEEP"
  "CIRCLE"
  "INK"
  "PAPER"
  "FLASH"
  "BRIGHT"
  "INVERSE"
  "OVER"
  "OUT"
  "LPRINT"
  "LLIST"
  "STOP"
  "READ"
  "DATA"
  "RESTORE"
  "NEW"
  "BORDER"
  "CONTINUE"
  "DIM"
  "REM"
  "FOR"
  "GO TO"
  "GO SUB"
  "INPUT"
  "LOAD"
  "LIST"
  "LET"
  "PAUSE"
  "NEXT"
  "POKE"
  "PRINT"
  "PLOT"
  "RUN"
  "SAVE"
  "RANDOMIZE"
  "IF"
  "CLS"
  "DRAW"
  "CLEAR"
  "RETURN"
  "COPY"
)

cd "$(dirname "${0}")"

for printer_in_use in 0 1; do
  for lower_screen_in_use in 0 1; do
    for fake_or_fake_reg_update in f s; do
      for flagsbit0 in 0 1; do
        {
          echo '# This file is part of the Spectrum +4 Project.'
          echo '# Licencing information can be found in the LICENCE file'
          echo '# (C) 2021 Spectrum +4 Authors. All rights reserved.'
          echo
          echo "# This file is auto-generated by ${0##*/}." 'DO NOT EDIT!'
          echo
          echo
          echo '.text'
          echo
          echo

          for a in {165..255}; do
            hexa=$(printf "%02x" $a)
            i=$((a-165))
            hexi=$(printf "%02x" $i)
            keyword=${keywords[$i]}
            testname="po_t_udg_${hexa}_${fake_or_fake_reg_update}${flagsbit0}${printer_in_use}${lower_screen_in_use}"
            msgname="msg_${testname}"
            trailingspace=' '
            leadingspace=''
            leadingspace_description='leading space suppressed'
            if [ "${fake_or_fake_reg_update}" == "f" ]; then
              mock_description="doesn't disturb any registers"
            else
              mock_description='disturbs all registers in the register file'
            fi

            if [ "${flagsbit0}" == "0" ]; then
              leadingspace=' '
              leadingspace_description='leading space _not_ suppressed'
            fi
            case "${keyword}" in
              "RND" | "INKEY$" | "PI" | "FN" | "POINT" | "SCREEN$" | "ATTR" | "AT" | "TAB" | "VAL$" | "CODE" | "VAL" | "LEN" | "SIN" | "COS" | "TAN" | "ASN" | "ACS" | "ATN" | "LN" | "EXP" | "INT" | "SQR" | "SGN" | "ABS" | "PEEK" | "IN" | "USR" | "STR$" | "CHR$" | "NOT" | "BIN" | "<=" | ">=" | "<>")
                leadingspace=''
                leadingspace_description='leading space suppressed'
                ;;
            esac
            case "${keyword}" in
              "RND" | "INKEY$" | "PI" | "<=" | ">=" | "<>" | "OPEN #" | "CLOSE #")
              trailingspace=''
              ;;
            esac
            echo
            echo
            echo "# Test ${testname} tests PO_T_UDG when passed A=0x${hexa} (BASIC keyword \"${keyword}\")"
            echo "# with bit 0 of [IY+1] set to ${flagsbit0} (${leadingspace_description}) when used with"
            echo "# a mock print-out routine that ${mock_description}."
            echo "# Expected output is \"${leadingspace}${keyword}${trailingspace}\"."
            echo "${testname}_setup:"
            if [ "${fake_or_fake_reg_update}" == "f" ]; then
              echo "  _strh   fake_channel_block, CURCHL      ; test channel block that uses fake_printout routine"
            else
              echo "  _strh   fake_touch_registers_channel_block, CURCHL"
              echo "                                          ; test channel block that uses fake_printout_touch_registers routine"
            fi

            if [ "${flagsbit0}" == "0" ]; then
              echo "  _resbit 0, FLAGS                        ; leading space allowed"
            else
              echo "  _setbit 0, FLAGS                        ; leading space suppressed"
            fi

            if [ "${printer_in_use}" == "0" ]; then
              echo "  _resbit 1, FLAGS                        ; printer not in use (used by po_fetch)"
            else
              echo "  _setbit 1, FLAGS                        ; printer in use (used by po_fetch)"
              echo "  _strb   0x46, P_POSN_X                  ; current printer cursor position"
              echo "  _strh   0x3527, PR_CC                   ; current (fake) printer buffer address"
            fi
            if [ "${lower_screen_in_use}" == "0" ]; then
              echo "  _resbit 0, TV_FLAG                      ; lower screen not in use (used by po_fetch)"
              echo "  _strh   0x352f, S_POSN_X                ; current upper screen cursor position"
              echo "  _strh   0x1bce, DF_CC                   ; current (fake) upper screen address in display file"
            else
              echo "  _setbit 0, TV_FLAG                      ; lower screen in use (used by po_fetch)"
              echo "  _strh   0x6321, S_POSN_X_L              ; current lower screen cursor position"
              echo "  _strh   0xaf73, DF_CC_L                 ; current (fake) lower screen address in display file"
            fi
            echo "  _strh   0x4002, 0x4000                  ; set start address of output"
            echo "  ret"
            echo
            echo "${testname}_setup_regs:"
            echo "  ld      a, 0x${hexa}"
            echo '  ret'
            echo
            echo "${testname}_effects:"
            echo "  ld      de, ${msgname}"
            echo '  call    print_msg_de'
            echo '  ret'
            echo
            echo "${testname}_effects_regs:"

            flags="H_FLAG"
            if [ "${printer_in_use}" == "0" ] && [ "${lower_screen_in_use}" == "0" ]; then
              flags="${flags}|Z_FLAG|PV_FLAG"
            fi

            # IY=0x5c3a, so IY+1 = 0x5c3b, and X3 is taken from bit 3 of high byte, i.e. bit 3 of 0x5c, which is 1
            # and X5 is taken from bit 5 of same byte, which is 0 - so X3_FLAG set but X5_FLAG clear...
            flags="${flags}|X3_FLAG"

            case "${keyword}" in
              "RND" | "INKEY$" | "PI")
                flags="${flags}|C_FLAG"
                if [ "${fake_or_fake_reg_update}" == "s" ]; then
                  echo '  call    touch_all_registers'
                fi
                echo "  ld      a, 0x${hexi}                    ; entry A SUB 165 (0xa5)"
                ;;
              "<=" | ">=" | "<>" | "OPEN #" | "CLOSE #")
                flags="${flags}|C_FLAG"
                if [ "${fake_or_fake_reg_update}" == "s" ]; then
                  echo '  call    touch_all_registers'
                fi
                lastchar="${keyword: -1}"
                doublea=$((2*$(printf "%d" "'${lastchar}")))
                printf "  ld      a, 0x%x\n" "${doublea}"
                ;;
              *)
                if [ "${fake_or_fake_reg_update}" == "s" ]; then
                  echo '  call    touch_all_registers'
                else
                  echo "  ld      a, ' '"
                fi
                ;;
            esac
            echo "  ldf     ${flags}"
            echo "  ld      d, 0x${hexi}"
            echo "  ld      e, $(sub_flags "${a}" 165)          ; entry A SUB 165 (0xa5)"
            if [ "${printer_in_use}" == "1" ]; then
              echo "  ld      c, 0x46"
              echo "  ld      hl, 0x3527"
            elif [ "${lower_screen_in_use}" == "1" ]; then
              echo "  ld      bc, 0x6321"
              echo "  ld      hl, 0xaf73"
            else
              echo "  ld      bc, 0x352f"
              echo "  ld      hl, 0x1bce"
            fi
            echo '  ret'
            echo
            echo "${msgname}: .asciz \"${leadingspace}${keyword}${trailingspace}\""
          done
        } | ../../../utils/asm-format/asm-format > "test_po_t_udg.${fake_or_fake_reg_update}${flagsbit0}${printer_in_use}${lower_screen_in_use}.gen-s"
      done
    done
  done
done
