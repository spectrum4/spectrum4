#!/usr/bin/env bash

# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

set -eu
set -o pipefail
export SHELLOPTS


# X3_FLAG and X5_FLAG
#   never
#
# N_FLAG:
#   always
#
# Z_FLAG:
#   "FN"
#
# PV_FLAG
#   "<=" / ">=" / "<>" / "OPEN #" / "CLOSE #"
#
# C_FLAG and S_FLAG
#   "RND" / "INKEY$" / "PI" / "<=" / ">=" / "<>" / "OPEN #" / "CLOSE #"
#
# H_FLAG
#   "RND" / "INKEY$" / "PI" / "ASN" / "ACS" / "ATN" / "OR" / "AND" / "MERGE" / "VERIFY" / "BEEP" / "RESTORE" / "NEW" / "BORDER" / "PRINT" / "PLOT" / "RUN"

function join_by { local IFS="$1"; shift; echo "$*"; }

function sub_flags {
  local a="${1}"
  local b="${2}"
  if [ "${b}" -gt "${a}" ]; then
    local c=$((a+256-b))
  else
    local c="$((a-b))"
  fi
  local result=()
  hexa=$(printf "%02x" $a)
  hexb=$(printf "%02x" $b)
  hexc=$(printf "%02x" $c)
  if [ "${b}" -gt "${a}" ]; then
    result+=("C_FLAG")
  fi
  result+=("N_FLAG")
  if [ "${a}" -lt 128 ] && [ "${b}" -ge 128 ] && [ "${c}" -ge 128 ]; then
    result+=("PV_FLAG")
  fi
  if [ "${a}" -ge 128 ] && [ "${b}" -lt 128 ] && [ "${c}" -lt 128 ]; then
    result+=("PV_FLAG")
  fi
  if [[ "${hexb:1:1}" > "${hexa:1:1}" ]]; then
    result+=("H_FLAG")
  fi
  if [ "${c}" == "0" ]; then
      result+=("Z_FLAG")
  fi
  case "${hexc:0:1}" in
    8 | 9 | a | b | c | d | e | f)
      result+=("S_FLAG")
      ;;
  esac
  join_by '|' "${result[@]}"
}

keywords=(
  "RND"
  "INKEY$"
  "PI"
  "FN"
  "POINT"
  "SCREEN$"
  "ATTR"
  "AT"
  "TAB"
  "VAL$"
  "CODE"
  "VAL"
  "LEN"
  "SIN"
  "COS"
  "TAN"
  "ASN"
  "ACS"
  "ATN"
  "LN"
  "EXP"
  "INT"
  "SQR"
  "SGN"
  "ABS"
  "PEEK"
  "IN"
  "USR"
  "STR$"
  "CHR$"
  "NOT"
  "BIN"
  "OR"
  "AND"
  "<="
  ">="
  "<>"
  "LINE"
  "THEN"
  "TO"
  "STEP"
  "DEF FN"
  "CAT"
  "FORMAT"
  "MOVE"
  "ERASE"
  "OPEN #"
  "CLOSE #"
  "MERGE"
  "VERIFY"
  "BEEP"
  "CIRCLE"
  "INK"
  "PAPER"
  "FLASH"
  "BRIGHT"
  "INVERSE"
  "OVER"
  "OUT"
  "LPRINT"
  "LLIST"
  "STOP"
  "READ"
  "DATA"
  "RESTORE"
  "NEW"
  "BORDER"
  "CONTINUE"
  "DIM"
  "REM"
  "FOR"
  "GO TO"
  "GO SUB"
  "INPUT"
  "LOAD"
  "LIST"
  "LET"
  "PAUSE"
  "NEXT"
  "POKE"
  "PRINT"
  "PLOT"
  "RUN"
  "SAVE"
  "RANDOMIZE"
  "IF"
  "CLS"
  "DRAW"
  "CLEAR"
  "RETURN"
  "COPY"
)

cd "$(dirname "${0}")"

for fake_or_fake_reg_update in f s; do
  for flagsbit0 in 0 1; do
    {
      echo '# This file is part of the Spectrum +4 Project.'
      echo '# Licencing information can be found in the LICENCE file'
      echo '# (C) 2021 Spectrum +4 Authors. All rights reserved.'
      echo
      echo "# This file is auto-generated by ${0##*/}." 'DO NOT EDIT!'
      echo
      echo
      echo '.text'
      echo
      echo

      for ((i=0; i<91;i++)); do
        hexi=$(printf "%02x" $i)
        keyword=${keywords[$i]}
        testname="po_tokens_${flagsbit0}${fake_or_fake_reg_update}${hexi}"
        msgname="msg_${testname}"
        trailingspace=' '
        leadingspace=''
        leadingspace_description='leading space suppressed'
        if [ "${fake_or_fake_reg_update}" == "f" ]; then
          mock_description="doesn't disturb any registers"
        else
          mock_description='disturbs all registers in the register file'
        fi

        if [ "${flagsbit0}" == "0" ]; then
          leadingspace=' '
          leadingspace_description='leading space _not_ suppressed'
        fi
        case "${keyword}" in
          "RND" | "INKEY$" | "PI" | "FN" | "POINT" | "SCREEN$" | "ATTR" | "AT" | "TAB" | "VAL$" | "CODE" | "VAL" | "LEN" | "SIN" | "COS" | "TAN" | "ASN" | "ACS" | "ATN" | "LN" | "EXP" | "INT" | "SQR" | "SGN" | "ABS" | "PEEK" | "IN" | "USR" | "STR$" | "CHR$" | "NOT" | "BIN" | "<=" | ">=" | "<>")
            leadingspace=''
            leadingspace_description='leading space suppressed'
            ;;
        esac
        case "${keyword}" in
          "RND" | "INKEY$" | "PI" | "<=" | ">=" | "<>" | "OPEN #" | "CLOSE #")
          trailingspace=''
          ;;
        esac
        echo
        echo
        echo "# Test ${testname} tests PO_TOKENS when passed A=0x${hexi} (BASIC keyword \"${keyword}\")"
        echo "# with bit 0 of [IY+1] set to ${flagsbit0} (${leadingspace_description}) when used with"
        echo "# a mock print-out routine that ${mock_description}."
        echo "# Expected output is \"${leadingspace}${keyword}${trailingspace}\"."
        echo "${testname}_setup:"
        if [ "${fake_or_fake_reg_update}" == "f" ]; then
          echo "  jp      fake${flagsbit0}"
        else
          echo "  jp      fake_reg_update${flagsbit0}"
        fi
        echo
        echo "${testname}_setup_regs:"
        echo "  ld      a, 0x${hexi}"
        echo '  ld      iy, 0x5000'
        echo '  ret'
        echo
        echo "${testname}_effects:"
        echo "  ld      de, ${msgname}"
        echo '  call    print_msg_de'
        echo '  ret'
        echo
        echo "${testname}_effects_regs:"
        echo '  push    af'
        echo '  pop     de'

        case "${keyword}" in
          "RND" | "INKEY$" | "PI")
            echo "  ldf     $(sub_flags "${i}" 3)" # 0x93
            if [ "${fake_or_fake_reg_update}" == "s" ]; then
              echo '  push    af'
              echo '  push    de'
              echo '  push    hl'
              echo '  call    touch_all_registers'
              echo '  pop     hl'
              echo '  pop     de'
              echo '  pop     af'
            fi
            ;;
          "<=" | ">=" | "<>" | "OPEN #" | "CLOSE #")
            lastchar="${keyword: -1}"
            doublea=$((2*$(printf "%d" "'${lastchar}")))
            printf "  ld      a, 0x%x\n" "${doublea}"
            echo "  ldf     $(sub_flags "${doublea}" 130)"
            if [ "${fake_or_fake_reg_update}" == "s" ]; then
              echo '  push    af'
              echo '  push    de'
              echo '  push    hl'
              echo '  call    touch_all_registers'
              echo '  pop     hl'
              echo '  pop     de'
              echo '  pop     af'
            fi
            ;;
          *)
            if [ "${fake_or_fake_reg_update}" == "s" ]; then
              echo '  push    de'
              echo '  push    hl'
              echo '  call    touch_all_registers'
              echo '  pop     hl'
              echo '  pop     de'
            else
              echo "  ld      a, ' '"
              echo "  ldf     $(sub_flags "${i}" 3)"
            fi
            ;;
        esac
        echo '  ret'
        echo
        echo "${msgname}: .asciz \"${leadingspace}${keyword}${trailingspace}\""
      done
    } | ../../../utils/asm-format/asm-format > "test_po_tokens.${fake_or_fake_reg_update}${flagsbit0}.gen-s"
  done
done
