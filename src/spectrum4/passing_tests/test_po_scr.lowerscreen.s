# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

# This file is auto-generated by test_po_scr.sh. DO NOT EDIT!

.text


po_scr_lower_screen_3c_01_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_lower_screen_3c_01_setup_regs:
  mov     w0, #0x3c                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3c_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3c
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (60>59) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3c_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (60>59) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0110
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_31_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_lower_screen_31_0c_setup_regs:
  mov     w0, #0x31                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_31_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x31
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (49>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_31_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (49>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0110
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_34_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_lower_screen_34_0c_setup_regs:
  mov     w0, #0x34                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_34_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x34
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (52>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_34_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (52>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_37_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_lower_screen_37_0c_setup_regs:
  mov     w0, #0x37                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_37_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x37
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (55>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_37_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (55>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_3a_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_lower_screen_3a_0c_setup_regs:
  mov     w0, #0x3a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3a_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (58>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3a_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (58>48) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2a_13_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_lower_screen_2a_13_setup_regs:
  mov     w0, #0x2a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2a_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (42>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2a_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (42>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0110
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2d_13_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_lower_screen_2d_13_setup_regs:
  mov     w0, #0x2d                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2d_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2d
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (45>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2d_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (45>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_30_13_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_lower_screen_30_13_setup_regs:
  mov     w0, #0x30                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_30_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x30
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (48>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_30_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (48>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_33_13_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_lower_screen_33_13_setup_regs:
  mov     w0, #0x33                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_33_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x33
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (51>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_33_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (51>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_36_13_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_lower_screen_36_13_setup_regs:
  mov     w0, #0x36                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_36_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x36
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (54>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_36_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (54>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_39_13_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_lower_screen_39_13_setup_regs:
  mov     w0, #0x39                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_39_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x39
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (57>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_39_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (57>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_3c_13_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_lower_screen_3c_13_setup_regs:
  mov     w0, #0x3c                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3c_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3c
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (60>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3c_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (60>41) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_25_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_25_18_setup_regs:
  mov     w0, #0x25                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_25_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x25
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (37>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_25_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (37>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0110
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_28_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_28_18_setup_regs:
  mov     w0, #0x28                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_28_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x28
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (40>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_28_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (40>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2b_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_2b_18_setup_regs:
  mov     w0, #0x2b                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2b_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2b
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (43>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2b_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (43>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2e_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_2e_18_setup_regs:
  mov     w0, #0x2e                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2e_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2e
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (46>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2e_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (46>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_31_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_31_18_setup_regs:
  mov     w0, #0x31                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_31_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x31
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (49>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_31_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (49>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_34_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_34_18_setup_regs:
  mov     w0, #0x34                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_34_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x34
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (52>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_34_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (52>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_37_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_37_18_setup_regs:
  mov     w0, #0x37                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_37_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x37
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (55>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_37_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (55>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_3a_18_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_lower_screen_3a_18_setup_regs:
  mov     w0, #0x3a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3a_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (58>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3a_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (58>36) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_0e_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_0e_2f_setup_regs:
  mov     w0, #0x0e                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_0e_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0e
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (14>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_0e_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (14>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0110
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_11_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_11_2f_setup_regs:
  mov     w0, #0x11                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_11_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x11
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (17>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_11_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (17>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_14_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_14_2f_setup_regs:
  mov     w0, #0x14                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_14_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x14
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (20>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_14_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (20>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_17_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_17_2f_setup_regs:
  mov     w0, #0x17                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_17_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x17
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (23>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_17_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (23>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1a_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_1a_2f_setup_regs:
  mov     w0, #0x1a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1a_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (26>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1a_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (26>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1d_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_1d_2f_setup_regs:
  mov     w0, #0x1d                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1d_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1d
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (29>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1d_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (29>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_20_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_20_2f_setup_regs:
  mov     w0, #0x20                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_20_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x20
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (32>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_20_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (32>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_23_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_23_2f_setup_regs:
  mov     w0, #0x23                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_23_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x23
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (35>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_23_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (35>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_26_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_26_2f_setup_regs:
  mov     w0, #0x26                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_26_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x26
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (38>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_26_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (38>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_29_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_29_2f_setup_regs:
  mov     w0, #0x29                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_29_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x29
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (41>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_29_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (41>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2c_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_2c_2f_setup_regs:
  mov     w0, #0x2c                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2c_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2c
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (44>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2c_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (44>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2f_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_2f_2f_setup_regs:
  mov     w0, #0x2f                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2f_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2f
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (47>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2f_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (47>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_32_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_32_2f_setup_regs:
  mov     w0, #0x32                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_32_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x32
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (50>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_32_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (50>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_35_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_35_2f_setup_regs:
  mov     w0, #0x35                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_35_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x35
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (53>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_35_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (53>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_38_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_38_2f_setup_regs:
  mov     w0, #0x38                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_38_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x38
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (56>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_38_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (56>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_3b_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_lower_screen_3b_2f_setup_regs:
  mov     w0, #0x3b                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3b_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3b
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (59>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3b_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (59>13) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_06_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_06_37_setup_regs:
  mov     w0, #0x06                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_06_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x06
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (6>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_06_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (6>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0110
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_09_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_09_37_setup_regs:
  mov     w0, #0x09                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_09_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x09
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (9>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_09_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (9>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_0c_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_0c_37_setup_regs:
  mov     w0, #0x0c                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_0c_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0c
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (12>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_0c_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (12>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_0f_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_0f_37_setup_regs:
  mov     w0, #0x0f                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_0f_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0f
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (15>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_0f_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (15>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_12_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_12_37_setup_regs:
  mov     w0, #0x12                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_12_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x12
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (18>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_12_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (18>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_15_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_15_37_setup_regs:
  mov     w0, #0x15                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_15_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x15
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (21>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_15_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (21>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_18_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_18_37_setup_regs:
  mov     w0, #0x18                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_18_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x18
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (24>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_18_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (24>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1b_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_1b_37_setup_regs:
  mov     w0, #0x1b                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1b_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1b
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (27>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1b_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (27>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1e_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_1e_37_setup_regs:
  mov     w0, #0x1e                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1e_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1e
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (30>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1e_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (30>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_21_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_21_37_setup_regs:
  mov     w0, #0x21                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_21_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x21
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (33>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_21_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (33>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_24_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_24_37_setup_regs:
  mov     w0, #0x24                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_24_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x24
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (36>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_24_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (36>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_27_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_27_37_setup_regs:
  mov     w0, #0x27                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_27_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x27
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (39>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_27_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (39>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2a_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_2a_37_setup_regs:
  mov     w0, #0x2a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2a_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (42>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2a_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (42>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2d_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_2d_37_setup_regs:
  mov     w0, #0x2d                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2d_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2d
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (45>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2d_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (45>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_30_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_30_37_setup_regs:
  mov     w0, #0x30                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_30_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x30
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (48>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_30_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (48>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_33_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_33_37_setup_regs:
  mov     w0, #0x33                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_33_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x33
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (51>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_33_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (51>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_36_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_36_37_setup_regs:
  mov     w0, #0x36                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_36_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x36
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (54>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_36_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (54>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_39_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_39_37_setup_regs:
  mov     w0, #0x39                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_39_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x39
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (57>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_39_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (57>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_3c_37_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_lower_screen_3c_37_setup_regs:
  mov     w0, #0x3c                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3c_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3c
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (60>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3c_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (60>5) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_02_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_02_3b_setup_regs:
  mov     w0, #0x02                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_02_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x02
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (2>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_02_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (2>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0110
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_05_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_05_3b_setup_regs:
  mov     w0, #0x05                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_05_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x05
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (5>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_05_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (5>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_08_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_08_3b_setup_regs:
  mov     w0, #0x08                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_08_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x08
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (8>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_08_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (8>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_0b_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_0b_3b_setup_regs:
  mov     w0, #0x0b                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_0b_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0b
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (11>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_0b_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (11>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_0e_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_0e_3b_setup_regs:
  mov     w0, #0x0e                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_0e_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0e
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (14>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_0e_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (14>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_11_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_11_3b_setup_regs:
  mov     w0, #0x11                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_11_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x11
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (17>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_11_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (17>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_14_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_14_3b_setup_regs:
  mov     w0, #0x14                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_14_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x14
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (20>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_14_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (20>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_17_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_17_3b_setup_regs:
  mov     w0, #0x17                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_17_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x17
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (23>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_17_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (23>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1a_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_1a_3b_setup_regs:
  mov     w0, #0x1a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1a_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (26>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1a_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (26>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1d_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_1d_3b_setup_regs:
  mov     w0, #0x1d                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1d_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1d
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (29>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1d_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (29>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_20_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_20_3b_setup_regs:
  mov     w0, #0x20                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_20_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x20
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (32>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_20_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (32>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_23_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_23_3b_setup_regs:
  mov     w0, #0x23                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_23_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x23
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (35>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_23_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (35>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_26_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_26_3b_setup_regs:
  mov     w0, #0x26                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_26_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x26
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (38>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_26_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (38>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_29_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_29_3b_setup_regs:
  mov     w0, #0x29                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_29_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x29
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (41>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_29_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (41>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2c_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_2c_3b_setup_regs:
  mov     w0, #0x2c                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2c_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2c
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (44>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2c_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (44>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2f_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_2f_3b_setup_regs:
  mov     w0, #0x2f                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2f_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2f
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (47>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2f_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (47>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_32_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_32_3b_setup_regs:
  mov     w0, #0x32                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_32_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x32
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (50>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_32_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (50>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_35_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_35_3b_setup_regs:
  mov     w0, #0x35                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_35_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x35
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (53>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_35_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (53>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_38_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_38_3b_setup_regs:
  mov     w0, #0x38                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_38_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x38
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (56>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_38_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (56>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_3b_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_lower_screen_3b_3b_setup_regs:
  mov     w0, #0x3b                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3b_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3b
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (59>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3b_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (59>1) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_04_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_04_3c_setup_regs:
  mov     w0, #0x04                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_04_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x04
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (4>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_04_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (4>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_07_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_07_3c_setup_regs:
  mov     w0, #0x07                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_07_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x07
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (7>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_07_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (7>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_0a_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_0a_3c_setup_regs:
  mov     w0, #0x0a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_0a_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (10>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_0a_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (10>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_0d_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_0d_3c_setup_regs:
  mov     w0, #0x0d                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_0d_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0d
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (13>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_0d_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (13>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_10_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_10_3c_setup_regs:
  mov     w0, #0x10                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_10_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x10
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (16>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_10_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (16>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_13_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_13_3c_setup_regs:
  mov     w0, #0x13                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_13_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x13
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (19>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_13_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (19>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_16_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_16_3c_setup_regs:
  mov     w0, #0x16                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_16_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x16
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (22>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_16_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (22>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_19_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_19_3c_setup_regs:
  mov     w0, #0x19                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_19_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x19
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (25>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_19_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (25>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1c_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_1c_3c_setup_regs:
  mov     w0, #0x1c                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1c_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1c
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (28>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1c_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (28>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_1f_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_1f_3c_setup_regs:
  mov     w0, #0x1f                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_1f_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1f
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (31>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_1f_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (31>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_22_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_22_3c_setup_regs:
  mov     w0, #0x22                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_22_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x22
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (34>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_22_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (34>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_25_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_25_3c_setup_regs:
  mov     w0, #0x25                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_25_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x25
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (37>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_25_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (37>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_28_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_28_3c_setup_regs:
  mov     w0, #0x28                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_28_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x28
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (40>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_28_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (40>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2b_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_2b_3c_setup_regs:
  mov     w0, #0x2b                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2b_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2b
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (43>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2b_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (43>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_2e_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_2e_3c_setup_regs:
  mov     w0, #0x2e                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_2e_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2e
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (46>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_2e_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (46>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_31_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_31_3c_setup_regs:
  mov     w0, #0x31                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_31_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x31
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (49>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_31_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (49>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_34_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_34_3c_setup_regs:
  mov     w0, #0x34                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_34_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x34
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (52>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_34_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (52>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_37_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_37_3c_setup_regs:
  mov     w0, #0x37                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_37_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x37
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (55>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_37_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (55>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_lower_screen_3a_3c_setup:
  _resbit 1, FLAGS                                // not printing
  _setbit 0, TV_FLAG                              // lower screen in use
  _strb   0x3c, DF_SZ                             // lower screen is 60 lines
  ret

po_scr_lower_screen_3a_3c_setup_regs:
  mov     w0, #0x3a                               // w0 > 60-[DF_SZ]
  mov     w1, #0x13                               // arbitrary value for x position
  ret

po_scr_lower_screen_3a_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3a
  mov     w1, #0x13
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (58>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_lower_screen_3a_3c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > 60-[DF_SZ] (58>0) this routine simply calls CL_SET (no scrolling, not out-of-screen)
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret
