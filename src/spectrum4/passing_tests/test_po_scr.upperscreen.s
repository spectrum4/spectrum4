# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

# This file is auto-generated by test_po_scr.sh. DO NOT EDIT!

.text


po_scr_upper_screen_02_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_02_01_setup_regs:
  mov     w0, #0x02                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_02_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x02
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (2>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_02_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (2>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_05_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_05_01_setup_regs:
  mov     w0, #0x05                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_05_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x05
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (5>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_05_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (5>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_08_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_08_01_setup_regs:
  mov     w0, #0x08                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_08_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x08
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (8>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_08_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (8>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_0b_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_0b_01_setup_regs:
  mov     w0, #0x0b                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_0b_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0b
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (11>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_0b_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (11>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_0e_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_0e_01_setup_regs:
  mov     w0, #0x0e                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_0e_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0e
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (14>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_0e_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (14>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_11_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_11_01_setup_regs:
  mov     w0, #0x11                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_11_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x11
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (17>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_11_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (17>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_14_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_14_01_setup_regs:
  mov     w0, #0x14                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_14_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x14
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (20>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_14_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (20>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_17_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_17_01_setup_regs:
  mov     w0, #0x17                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_17_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x17
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (23>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_17_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (23>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1a_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_1a_01_setup_regs:
  mov     w0, #0x1a                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1a_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1a
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (26>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1a_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (26>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1d_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_1d_01_setup_regs:
  mov     w0, #0x1d                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1d_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1d
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (29>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1d_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (29>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_20_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_20_01_setup_regs:
  mov     w0, #0x20                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_20_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x20
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (32>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_20_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (32>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_23_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_23_01_setup_regs:
  mov     w0, #0x23                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_23_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x23
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (35>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_23_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (35>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_26_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_26_01_setup_regs:
  mov     w0, #0x26                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_26_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x26
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (38>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_26_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (38>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_29_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_29_01_setup_regs:
  mov     w0, #0x29                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_29_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x29
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (41>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_29_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (41>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2c_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_2c_01_setup_regs:
  mov     w0, #0x2c                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2c_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2c
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (44>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2c_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (44>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2f_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_2f_01_setup_regs:
  mov     w0, #0x2f                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2f_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2f
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (47>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2f_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (47>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_32_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_32_01_setup_regs:
  mov     w0, #0x32                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_32_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x32
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (50>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_32_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (50>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_35_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_35_01_setup_regs:
  mov     w0, #0x35                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_35_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x35
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (53>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_35_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (53>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_38_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_38_01_setup_regs:
  mov     w0, #0x38                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_38_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x38
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (56>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_38_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (56>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_3b_01_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x01, DF_SZ                             // lower screen is 1 lines
  ret

po_scr_upper_screen_3b_01_setup_regs:
  mov     w0, #0x3b                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_3b_01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3b
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (59>1) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_3b_01_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (59>1) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_0d_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_0d_0c_setup_regs:
  mov     w0, #0x0d                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_0d_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x0d
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (13>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_0d_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (13>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_10_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_10_0c_setup_regs:
  mov     w0, #0x10                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_10_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x10
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (16>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_10_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (16>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_13_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_13_0c_setup_regs:
  mov     w0, #0x13                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_13_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x13
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (19>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_13_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (19>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_16_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_16_0c_setup_regs:
  mov     w0, #0x16                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_16_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x16
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (22>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_16_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (22>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_19_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_19_0c_setup_regs:
  mov     w0, #0x19                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_19_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x19
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (25>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_19_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (25>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1c_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_1c_0c_setup_regs:
  mov     w0, #0x1c                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1c_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1c
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (28>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1c_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (28>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1f_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_1f_0c_setup_regs:
  mov     w0, #0x1f                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1f_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1f
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (31>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1f_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (31>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_22_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_22_0c_setup_regs:
  mov     w0, #0x22                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_22_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x22
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (34>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_22_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (34>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_25_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_25_0c_setup_regs:
  mov     w0, #0x25                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_25_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x25
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (37>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_25_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (37>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_28_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_28_0c_setup_regs:
  mov     w0, #0x28                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_28_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x28
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (40>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_28_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (40>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2b_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_2b_0c_setup_regs:
  mov     w0, #0x2b                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2b_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2b
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (43>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2b_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (43>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2e_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_2e_0c_setup_regs:
  mov     w0, #0x2e                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2e_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2e
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (46>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2e_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (46>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_31_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_31_0c_setup_regs:
  mov     w0, #0x31                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_31_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x31
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (49>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_31_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (49>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_34_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_34_0c_setup_regs:
  mov     w0, #0x34                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_34_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x34
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (52>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_34_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (52>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_37_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_37_0c_setup_regs:
  mov     w0, #0x37                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_37_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x37
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (55>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_37_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (55>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_3a_0c_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x0c, DF_SZ                             // lower screen is 12 lines
  ret

po_scr_upper_screen_3a_0c_setup_regs:
  mov     w0, #0x3a                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_3a_0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3a
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (58>12) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_3a_0c_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (58>12) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_14_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_14_13_setup_regs:
  mov     w0, #0x14                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_14_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x14
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (20>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_14_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (20>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_17_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_17_13_setup_regs:
  mov     w0, #0x17                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_17_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x17
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (23>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_17_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (23>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1a_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_1a_13_setup_regs:
  mov     w0, #0x1a                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1a_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1a
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (26>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1a_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (26>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1d_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_1d_13_setup_regs:
  mov     w0, #0x1d                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1d_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1d
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (29>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1d_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (29>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_20_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_20_13_setup_regs:
  mov     w0, #0x20                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_20_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x20
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (32>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_20_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (32>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_23_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_23_13_setup_regs:
  mov     w0, #0x23                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_23_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x23
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (35>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_23_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (35>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_26_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_26_13_setup_regs:
  mov     w0, #0x26                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_26_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x26
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (38>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_26_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (38>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_29_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_29_13_setup_regs:
  mov     w0, #0x29                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_29_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x29
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (41>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_29_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (41>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2c_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_2c_13_setup_regs:
  mov     w0, #0x2c                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2c_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2c
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (44>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2c_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (44>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2f_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_2f_13_setup_regs:
  mov     w0, #0x2f                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2f_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2f
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (47>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2f_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (47>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_32_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_32_13_setup_regs:
  mov     w0, #0x32                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_32_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x32
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (50>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_32_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (50>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_35_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_35_13_setup_regs:
  mov     w0, #0x35                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_35_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x35
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (53>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_35_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (53>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_38_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_38_13_setup_regs:
  mov     w0, #0x38                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_38_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x38
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (56>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_38_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (56>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_3b_13_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x13, DF_SZ                             // lower screen is 19 lines
  ret

po_scr_upper_screen_3b_13_setup_regs:
  mov     w0, #0x3b                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_3b_13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3b
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (59>19) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_3b_13_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (59>19) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_19_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_19_18_setup_regs:
  mov     w0, #0x19                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_19_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x19
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (25>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_19_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (25>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1c_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_1c_18_setup_regs:
  mov     w0, #0x1c                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1c_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1c
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (28>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1c_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (28>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_1f_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_1f_18_setup_regs:
  mov     w0, #0x1f                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_1f_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x1f
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (31>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_1f_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (31>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_22_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_22_18_setup_regs:
  mov     w0, #0x22                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_22_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x22
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (34>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_22_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (34>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_25_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_25_18_setup_regs:
  mov     w0, #0x25                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_25_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x25
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (37>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_25_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (37>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_28_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_28_18_setup_regs:
  mov     w0, #0x28                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_28_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x28
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (40>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_28_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (40>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2b_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_2b_18_setup_regs:
  mov     w0, #0x2b                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2b_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2b
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (43>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2b_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (43>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_2e_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_2e_18_setup_regs:
  mov     w0, #0x2e                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_2e_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x2e
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (46>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_2e_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (46>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_31_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_31_18_setup_regs:
  mov     w0, #0x31                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_31_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x31
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (49>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_31_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (49>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_34_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_34_18_setup_regs:
  mov     w0, #0x34                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_34_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x34
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (52>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_34_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (52>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_37_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_37_18_setup_regs:
  mov     w0, #0x37                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_37_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x37
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (55>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_37_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (55>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_3a_18_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x18, DF_SZ                             // lower screen is 24 lines
  ret

po_scr_upper_screen_3a_18_setup_regs:
  mov     w0, #0x3a                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_3a_18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3a
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (58>24) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_3a_18_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (58>24) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_30_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_upper_screen_30_2f_setup_regs:
  mov     w0, #0x30                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_30_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x30
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (48>47) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_30_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (48>47) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_33_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_upper_screen_33_2f_setup_regs:
  mov     w0, #0x33                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_33_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x33
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (51>47) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_33_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (51>47) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_36_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_upper_screen_36_2f_setup_regs:
  mov     w0, #0x36                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_36_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x36
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (54>47) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_36_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (54>47) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_39_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_upper_screen_39_2f_setup_regs:
  mov     w0, #0x39                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_39_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x39
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (57>47) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_39_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (57>47) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_3c_2f_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x2f, DF_SZ                             // lower screen is 47 lines
  ret

po_scr_upper_screen_3c_2f_setup_regs:
  mov     w0, #0x3c                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_3c_2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3c
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (60>47) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_3c_2f_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (60>47) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_38_37_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_upper_screen_38_37_setup_regs:
  mov     w0, #0x38                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_38_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x38
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (56>55) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_38_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (56>55) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_3b_37_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x37, DF_SZ                             // lower screen is 55 lines
  ret

po_scr_upper_screen_3b_37_setup_regs:
  mov     w0, #0x3b                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_3b_37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3b
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (59>55) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_3b_37_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (59>55) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret


po_scr_upper_screen_3c_3b_setup:
  _resbit 1, FLAGS                                // not printing
  _resbit 0, TV_FLAG                              // not lower screen
  _strb   0x3b, DF_SZ                             // lower screen is 59 lines
  ret

po_scr_upper_screen_3c_3b_setup_regs:
  mov     w0, #0x3c                               // w0 > [DF_SZ]
  mov     w1, #0x17                               // arbitrary value for x position
  ret

po_scr_upper_screen_3c_3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  mov     w0, #0x3c
  mov     w1, #0x17
  bl      cl_set                                  // since w0 > [DF_SZ] (60>59) this routine simply calls CL_SET with same inputs
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret

po_scr_upper_screen_3c_3b_effects_regs:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  bl      cl_set                                  // since w0 > [DF_SZ] (60>59) this routine simply calls CL_SET with same inputs
  nzcv    #0b0010
  ldp     x29, x30, [sp], #0x10                   // Pop frame pointer, procedure link register off stack.
  ret
