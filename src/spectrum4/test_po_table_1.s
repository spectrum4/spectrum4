# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

# This file is auto-generated by test_po_table_1.sh. DO NOT EDIT!

.text


.align 0
msg_po_table_1_set0_0_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set0_0_34_out:
  .asciz " abc4"

.align 2
po_table_1_set0_0_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_34_setup_regs:
  adr     x4, msg_po_table_1_set0_0_34_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_0_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set0_0_24_out:
  .asciz " abc$"

.align 2
po_table_1_set0_0_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_24_setup_regs:
  adr     x4, msg_po_table_1_set0_0_24_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_0_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set0_0_3c_out:
  .asciz " abc<"

.align 2
po_table_1_set0_0_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_3c_setup_regs:
  adr     x4, msg_po_table_1_set0_0_3c_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_0_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set0_0_23_out:
  .asciz " abc#"

.align 2
po_table_1_set0_0_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_23_setup_regs:
  adr     x4, msg_po_table_1_set0_0_23_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_0_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set0_0_40_out:
  .asciz " abc@"

.align 2
po_table_1_set0_0_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_40_setup_regs:
  adr     x4, msg_po_table_1_set0_0_40_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_0_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set0_0_41_out:
  .asciz " abcA"

.align 2
po_table_1_set0_0_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_41_setup_regs:
  adr     x4, msg_po_table_1_set0_0_41_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_0_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set0_0_56_out:
  .asciz " abcV"

.align 2
po_table_1_set0_0_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_56_setup_regs:
  adr     x4, msg_po_table_1_set0_0_56_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_0_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set0_0_7b_out:
  .asciz " abc{"

.align 2
po_table_1_set0_0_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_0_7b_setup_regs:
  adr     x4, msg_po_table_1_set0_0_7b_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set0_0_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_0_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_0_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_0_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set0_1_34_out:
  .asciz " abc4"

.align 2
po_table_1_set0_1_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_34_setup_regs:
  adr     x4, msg_po_table_1_set0_1_34_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set0_1_24_out:
  .asciz " abc$"

.align 2
po_table_1_set0_1_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_24_setup_regs:
  adr     x4, msg_po_table_1_set0_1_24_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set0_1_3c_out:
  .asciz " abc<"

.align 2
po_table_1_set0_1_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_3c_setup_regs:
  adr     x4, msg_po_table_1_set0_1_3c_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set0_1_23_out:
  .asciz " abc#"

.align 2
po_table_1_set0_1_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_23_setup_regs:
  adr     x4, msg_po_table_1_set0_1_23_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set0_1_40_out:
  .asciz " abc@"

.align 2
po_table_1_set0_1_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_40_setup_regs:
  adr     x4, msg_po_table_1_set0_1_40_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set0_1_41_out:
  .asciz " abcA"

.align 2
po_table_1_set0_1_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_41_setup_regs:
  adr     x4, msg_po_table_1_set0_1_41_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set0_1_56_out:
  .asciz " abcV"

.align 2
po_table_1_set0_1_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_56_setup_regs:
  adr     x4, msg_po_table_1_set0_1_56_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_1_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set0_1_7b_out:
  .asciz " abc{"

.align 2
po_table_1_set0_1_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_1_7b_setup_regs:
  adr     x4, msg_po_table_1_set0_1_7b_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set0_1_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_1_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_1_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_1_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set0_2_34_out:
  .asciz " abc4"

.align 2
po_table_1_set0_2_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_34_setup_regs:
  adr     x4, msg_po_table_1_set0_2_34_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set0_2_24_out:
  .asciz " abc$"

.align 2
po_table_1_set0_2_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_24_setup_regs:
  adr     x4, msg_po_table_1_set0_2_24_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set0_2_3c_out:
  .asciz " abc<"

.align 2
po_table_1_set0_2_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_3c_setup_regs:
  adr     x4, msg_po_table_1_set0_2_3c_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set0_2_23_out:
  .asciz " abc#"

.align 2
po_table_1_set0_2_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_23_setup_regs:
  adr     x4, msg_po_table_1_set0_2_23_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set0_2_40_out:
  .asciz " abc@"

.align 2
po_table_1_set0_2_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_40_setup_regs:
  adr     x4, msg_po_table_1_set0_2_40_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set0_2_41_out:
  .asciz " abcA"

.align 2
po_table_1_set0_2_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_41_setup_regs:
  adr     x4, msg_po_table_1_set0_2_41_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set0_2_56_out:
  .asciz " abcV"

.align 2
po_table_1_set0_2_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_56_setup_regs:
  adr     x4, msg_po_table_1_set0_2_56_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_2_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set0_2_7b_out:
  .asciz " abc{"

.align 2
po_table_1_set0_2_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_2_7b_setup_regs:
  adr     x4, msg_po_table_1_set0_2_7b_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set0_2_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_2_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_2_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_2_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_3_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set0_3_34_out:
  .asciz " abc4"

.align 2
po_table_1_set0_3_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_34_setup_regs:
  adr     x4, msg_po_table_1_set0_3_34_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_3_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set0_3_24_out:
  .asciz " abc$ "

.align 2
po_table_1_set0_3_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_24_setup_regs:
  adr     x4, msg_po_table_1_set0_3_24_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_24_out
  mov     x6, '$'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set0_3_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set0_3_3c_out:
  .asciz " abc<"

.align 2
po_table_1_set0_3_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_3c_setup_regs:
  adr     x4, msg_po_table_1_set0_3_3c_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_3_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set0_3_23_out:
  .asciz " abc#"

.align 2
po_table_1_set0_3_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_23_setup_regs:
  adr     x4, msg_po_table_1_set0_3_23_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_3_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set0_3_40_out:
  .asciz " abc@"

.align 2
po_table_1_set0_3_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_40_setup_regs:
  adr     x4, msg_po_table_1_set0_3_40_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_3_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set0_3_41_out:
  .asciz " abcA "

.align 2
po_table_1_set0_3_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_41_setup_regs:
  adr     x4, msg_po_table_1_set0_3_41_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_41_out
  mov     x6, 'A'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set0_3_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set0_3_56_out:
  .asciz " abcV "

.align 2
po_table_1_set0_3_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_56_setup_regs:
  adr     x4, msg_po_table_1_set0_3_56_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_56_out
  mov     x6, 'V'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set0_3_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set0_3_7b_out:
  .asciz " abc{ "

.align 2
po_table_1_set0_3_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_3_7b_setup_regs:
  adr     x4, msg_po_table_1_set0_3_7b_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set0_3_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_3_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_3_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_3_7b_out
  mov     x6, '{'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set0_4_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set0_4_34_out:
  .asciz " abc4"

.align 2
po_table_1_set0_4_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_34_setup_regs:
  adr     x4, msg_po_table_1_set0_4_34_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_4_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set0_4_24_out:
  .asciz " abc$ "

.align 2
po_table_1_set0_4_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_24_setup_regs:
  adr     x4, msg_po_table_1_set0_4_24_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set0_4_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set0_4_3c_out:
  .asciz " abc<"

.align 2
po_table_1_set0_4_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_3c_setup_regs:
  adr     x4, msg_po_table_1_set0_4_3c_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_4_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set0_4_23_out:
  .asciz " abc#"

.align 2
po_table_1_set0_4_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_23_setup_regs:
  adr     x4, msg_po_table_1_set0_4_23_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_4_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set0_4_40_out:
  .asciz " abc@"

.align 2
po_table_1_set0_4_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_40_setup_regs:
  adr     x4, msg_po_table_1_set0_4_40_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_4_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set0_4_41_out:
  .asciz " abcA "

.align 2
po_table_1_set0_4_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_41_setup_regs:
  adr     x4, msg_po_table_1_set0_4_41_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set0_4_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set0_4_56_out:
  .asciz " abcV "

.align 2
po_table_1_set0_4_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_56_setup_regs:
  adr     x4, msg_po_table_1_set0_4_56_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set0_4_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set0_4_7b_out:
  .asciz " abc{ "

.align 2
po_table_1_set0_4_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_4_7b_setup_regs:
  adr     x4, msg_po_table_1_set0_4_7b_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set0_4_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_4_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_4_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_4_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set0_5_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set0_5_34_out:
  .asciz " abc4"

.align 2
po_table_1_set0_5_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_34_setup_regs:
  adr     x4, msg_po_table_1_set0_5_34_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_5_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set0_5_24_out:
  .asciz " abc$ "

.align 2
po_table_1_set0_5_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_24_setup_regs:
  adr     x4, msg_po_table_1_set0_5_24_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set0_5_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set0_5_3c_out:
  .asciz " abc<"

.align 2
po_table_1_set0_5_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_3c_setup_regs:
  adr     x4, msg_po_table_1_set0_5_3c_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_5_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set0_5_23_out:
  .asciz " abc#"

.align 2
po_table_1_set0_5_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_23_setup_regs:
  adr     x4, msg_po_table_1_set0_5_23_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_5_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set0_5_40_out:
  .asciz " abc@"

.align 2
po_table_1_set0_5_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_40_setup_regs:
  adr     x4, msg_po_table_1_set0_5_40_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set0_5_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set0_5_41_out:
  .asciz " abcA "

.align 2
po_table_1_set0_5_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_41_setup_regs:
  adr     x4, msg_po_table_1_set0_5_41_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set0_5_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set0_5_56_out:
  .asciz " abcV "

.align 2
po_table_1_set0_5_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_56_setup_regs:
  adr     x4, msg_po_table_1_set0_5_56_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set0_5_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set0_5_7b_out:
  .asciz " abc{ "

.align 2
po_table_1_set0_5_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_set0_5_7b_setup_regs:
  adr     x4, msg_po_table_1_set0_5_7b_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set0_5_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set0_5_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set0_5_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set0_5_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_0_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set1_0_34_out:
  .asciz "abc4"

.align 2
po_table_1_set1_0_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_34_setup_regs:
  adr     x4, msg_po_table_1_set1_0_34_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_0_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set1_0_24_out:
  .asciz "abc$"

.align 2
po_table_1_set1_0_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_24_setup_regs:
  adr     x4, msg_po_table_1_set1_0_24_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_0_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set1_0_3c_out:
  .asciz "abc<"

.align 2
po_table_1_set1_0_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_3c_setup_regs:
  adr     x4, msg_po_table_1_set1_0_3c_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_0_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set1_0_23_out:
  .asciz "abc#"

.align 2
po_table_1_set1_0_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_23_setup_regs:
  adr     x4, msg_po_table_1_set1_0_23_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_0_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set1_0_40_out:
  .asciz "abc@"

.align 2
po_table_1_set1_0_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_40_setup_regs:
  adr     x4, msg_po_table_1_set1_0_40_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_0_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set1_0_41_out:
  .asciz "abcA"

.align 2
po_table_1_set1_0_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_41_setup_regs:
  adr     x4, msg_po_table_1_set1_0_41_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_0_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set1_0_56_out:
  .asciz "abcV"

.align 2
po_table_1_set1_0_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_56_setup_regs:
  adr     x4, msg_po_table_1_set1_0_56_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_0_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set1_0_7b_out:
  .asciz "abc{"

.align 2
po_table_1_set1_0_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_0_7b_setup_regs:
  adr     x4, msg_po_table_1_set1_0_7b_in
  mov     x5, #00
  set_carry
  ret

.align 2
po_table_1_set1_0_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_0_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_0_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_0_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set1_1_34_out:
  .asciz "abc4"

.align 2
po_table_1_set1_1_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_34_setup_regs:
  adr     x4, msg_po_table_1_set1_1_34_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set1_1_24_out:
  .asciz "abc$"

.align 2
po_table_1_set1_1_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_24_setup_regs:
  adr     x4, msg_po_table_1_set1_1_24_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set1_1_3c_out:
  .asciz "abc<"

.align 2
po_table_1_set1_1_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_3c_setup_regs:
  adr     x4, msg_po_table_1_set1_1_3c_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set1_1_23_out:
  .asciz "abc#"

.align 2
po_table_1_set1_1_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_23_setup_regs:
  adr     x4, msg_po_table_1_set1_1_23_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set1_1_40_out:
  .asciz "abc@"

.align 2
po_table_1_set1_1_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_40_setup_regs:
  adr     x4, msg_po_table_1_set1_1_40_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set1_1_41_out:
  .asciz "abcA"

.align 2
po_table_1_set1_1_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_41_setup_regs:
  adr     x4, msg_po_table_1_set1_1_41_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set1_1_56_out:
  .asciz "abcV"

.align 2
po_table_1_set1_1_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_56_setup_regs:
  adr     x4, msg_po_table_1_set1_1_56_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_1_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set1_1_7b_out:
  .asciz "abc{"

.align 2
po_table_1_set1_1_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_1_7b_setup_regs:
  adr     x4, msg_po_table_1_set1_1_7b_in
  mov     x5, #01
  set_carry
  ret

.align 2
po_table_1_set1_1_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_1_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_1_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_1_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set1_2_34_out:
  .asciz "abc4"

.align 2
po_table_1_set1_2_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_34_setup_regs:
  adr     x4, msg_po_table_1_set1_2_34_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set1_2_24_out:
  .asciz "abc$"

.align 2
po_table_1_set1_2_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_24_setup_regs:
  adr     x4, msg_po_table_1_set1_2_24_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set1_2_3c_out:
  .asciz "abc<"

.align 2
po_table_1_set1_2_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_3c_setup_regs:
  adr     x4, msg_po_table_1_set1_2_3c_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set1_2_23_out:
  .asciz "abc#"

.align 2
po_table_1_set1_2_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_23_setup_regs:
  adr     x4, msg_po_table_1_set1_2_23_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set1_2_40_out:
  .asciz "abc@"

.align 2
po_table_1_set1_2_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_40_setup_regs:
  adr     x4, msg_po_table_1_set1_2_40_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set1_2_41_out:
  .asciz "abcA"

.align 2
po_table_1_set1_2_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_41_setup_regs:
  adr     x4, msg_po_table_1_set1_2_41_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set1_2_56_out:
  .asciz "abcV"

.align 2
po_table_1_set1_2_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_56_setup_regs:
  adr     x4, msg_po_table_1_set1_2_56_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_2_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set1_2_7b_out:
  .asciz "abc{"

.align 2
po_table_1_set1_2_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_2_7b_setup_regs:
  adr     x4, msg_po_table_1_set1_2_7b_in
  mov     x5, #02
  set_carry
  ret

.align 2
po_table_1_set1_2_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_2_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_2_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_2_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_3_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set1_3_34_out:
  .asciz "abc4"

.align 2
po_table_1_set1_3_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_34_setup_regs:
  adr     x4, msg_po_table_1_set1_3_34_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_3_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set1_3_24_out:
  .asciz "abc$ "

.align 2
po_table_1_set1_3_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_24_setup_regs:
  adr     x4, msg_po_table_1_set1_3_24_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_24_out
  mov     x6, '$'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set1_3_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set1_3_3c_out:
  .asciz "abc<"

.align 2
po_table_1_set1_3_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_3c_setup_regs:
  adr     x4, msg_po_table_1_set1_3_3c_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_3_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set1_3_23_out:
  .asciz "abc#"

.align 2
po_table_1_set1_3_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_23_setup_regs:
  adr     x4, msg_po_table_1_set1_3_23_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_3_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set1_3_40_out:
  .asciz "abc@"

.align 2
po_table_1_set1_3_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_40_setup_regs:
  adr     x4, msg_po_table_1_set1_3_40_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_3_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set1_3_41_out:
  .asciz "abcA "

.align 2
po_table_1_set1_3_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_41_setup_regs:
  adr     x4, msg_po_table_1_set1_3_41_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_41_out
  mov     x6, 'A'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set1_3_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set1_3_56_out:
  .asciz "abcV "

.align 2
po_table_1_set1_3_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_56_setup_regs:
  adr     x4, msg_po_table_1_set1_3_56_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_56_out
  mov     x6, 'V'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set1_3_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set1_3_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_set1_3_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_3_7b_setup_regs:
  adr     x4, msg_po_table_1_set1_3_7b_in
  mov     x5, #03
  set_carry
  ret

.align 2
po_table_1_set1_3_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_3_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_3_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_3_7b_out
  mov     x6, '{'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_set1_4_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set1_4_34_out:
  .asciz "abc4"

.align 2
po_table_1_set1_4_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_34_setup_regs:
  adr     x4, msg_po_table_1_set1_4_34_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_4_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set1_4_24_out:
  .asciz "abc$ "

.align 2
po_table_1_set1_4_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_24_setup_regs:
  adr     x4, msg_po_table_1_set1_4_24_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_4_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set1_4_3c_out:
  .asciz "abc<"

.align 2
po_table_1_set1_4_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_3c_setup_regs:
  adr     x4, msg_po_table_1_set1_4_3c_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_4_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set1_4_23_out:
  .asciz "abc#"

.align 2
po_table_1_set1_4_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_23_setup_regs:
  adr     x4, msg_po_table_1_set1_4_23_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_4_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set1_4_40_out:
  .asciz "abc@"

.align 2
po_table_1_set1_4_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_40_setup_regs:
  adr     x4, msg_po_table_1_set1_4_40_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_4_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set1_4_41_out:
  .asciz "abcA "

.align 2
po_table_1_set1_4_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_41_setup_regs:
  adr     x4, msg_po_table_1_set1_4_41_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_4_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set1_4_56_out:
  .asciz "abcV "

.align 2
po_table_1_set1_4_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_56_setup_regs:
  adr     x4, msg_po_table_1_set1_4_56_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_4_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set1_4_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_set1_4_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_4_7b_setup_regs:
  adr     x4, msg_po_table_1_set1_4_7b_in
  mov     x5, #04
  set_carry
  ret

.align 2
po_table_1_set1_4_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_4_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_4_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_4_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_5_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_set1_5_34_out:
  .asciz "abc4"

.align 2
po_table_1_set1_5_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_34_setup_regs:
  adr     x4, msg_po_table_1_set1_5_34_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_5_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_set1_5_24_out:
  .asciz "abc$ "

.align 2
po_table_1_set1_5_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_24_setup_regs:
  adr     x4, msg_po_table_1_set1_5_24_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_5_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_set1_5_3c_out:
  .asciz "abc<"

.align 2
po_table_1_set1_5_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_3c_setup_regs:
  adr     x4, msg_po_table_1_set1_5_3c_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_5_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_set1_5_23_out:
  .asciz "abc#"

.align 2
po_table_1_set1_5_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_23_setup_regs:
  adr     x4, msg_po_table_1_set1_5_23_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_5_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_set1_5_40_out:
  .asciz "abc@"

.align 2
po_table_1_set1_5_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_40_setup_regs:
  adr     x4, msg_po_table_1_set1_5_40_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_set1_5_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_set1_5_41_out:
  .asciz "abcA "

.align 2
po_table_1_set1_5_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_41_setup_regs:
  adr     x4, msg_po_table_1_set1_5_41_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_5_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_set1_5_56_out:
  .asciz "abcV "

.align 2
po_table_1_set1_5_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_56_setup_regs:
  adr     x4, msg_po_table_1_set1_5_56_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_set1_5_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_set1_5_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_set1_5_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_set1_5_7b_setup_regs:
  adr     x4, msg_po_table_1_set1_5_7b_in
  mov     x5, #05
  set_carry
  ret

.align 2
po_table_1_set1_5_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_set1_5_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_set1_5_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_set1_5_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_0_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear0_0_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear0_0_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_34_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_34_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_0_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear0_0_24_out:
  .asciz "abc$"

.align 2
po_table_1_clear0_0_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_24_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_24_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_0_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear0_0_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear0_0_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_3c_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_3c_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_0_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear0_0_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear0_0_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_23_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_23_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_0_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear0_0_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear0_0_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_40_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_40_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_0_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear0_0_41_out:
  .asciz "abcA"

.align 2
po_table_1_clear0_0_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_41_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_41_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_0_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear0_0_56_out:
  .asciz "abcV"

.align 2
po_table_1_clear0_0_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_56_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_56_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_0_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear0_0_7b_out:
  .asciz "abc{"

.align 2
po_table_1_clear0_0_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_0_7b_setup_regs:
  adr     x4, msg_po_table_1_clear0_0_7b_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear0_0_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_0_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_0_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_0_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear0_1_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear0_1_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_34_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_34_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear0_1_24_out:
  .asciz "abc$"

.align 2
po_table_1_clear0_1_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_24_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_24_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear0_1_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear0_1_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_3c_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_3c_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear0_1_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear0_1_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_23_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_23_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear0_1_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear0_1_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_40_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_40_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear0_1_41_out:
  .asciz "abcA"

.align 2
po_table_1_clear0_1_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_41_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_41_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear0_1_56_out:
  .asciz "abcV"

.align 2
po_table_1_clear0_1_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_56_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_56_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_1_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear0_1_7b_out:
  .asciz "abc{"

.align 2
po_table_1_clear0_1_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_1_7b_setup_regs:
  adr     x4, msg_po_table_1_clear0_1_7b_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear0_1_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_1_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_1_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_1_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear0_2_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear0_2_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_34_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_34_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear0_2_24_out:
  .asciz "abc$"

.align 2
po_table_1_clear0_2_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_24_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_24_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear0_2_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear0_2_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_3c_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_3c_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear0_2_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear0_2_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_23_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_23_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear0_2_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear0_2_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_40_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_40_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear0_2_41_out:
  .asciz "abcA"

.align 2
po_table_1_clear0_2_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_41_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_41_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear0_2_56_out:
  .asciz "abcV"

.align 2
po_table_1_clear0_2_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_56_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_56_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_2_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear0_2_7b_out:
  .asciz "abc{"

.align 2
po_table_1_clear0_2_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_2_7b_setup_regs:
  adr     x4, msg_po_table_1_clear0_2_7b_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear0_2_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_2_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_2_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_2_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_3_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear0_3_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear0_3_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_34_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_34_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_3_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear0_3_24_out:
  .asciz "abc$ "

.align 2
po_table_1_clear0_3_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_24_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_24_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_24_out
  mov     x6, '$'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear0_3_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear0_3_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear0_3_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_3c_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_3c_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_3_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear0_3_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear0_3_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_23_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_23_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_3_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear0_3_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear0_3_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_40_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_40_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_3_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear0_3_41_out:
  .asciz "abcA "

.align 2
po_table_1_clear0_3_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_41_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_41_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_41_out
  mov     x6, 'A'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear0_3_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear0_3_56_out:
  .asciz "abcV "

.align 2
po_table_1_clear0_3_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_56_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_56_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_56_out
  mov     x6, 'V'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear0_3_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear0_3_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_clear0_3_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_3_7b_setup_regs:
  adr     x4, msg_po_table_1_clear0_3_7b_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear0_3_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_3_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_3_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_3_7b_out
  mov     x6, '{'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear0_4_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear0_4_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear0_4_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_34_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_34_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_4_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear0_4_24_out:
  .asciz "abc$ "

.align 2
po_table_1_clear0_4_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_24_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_24_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_4_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear0_4_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear0_4_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_3c_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_3c_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_4_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear0_4_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear0_4_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_23_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_23_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_4_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear0_4_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear0_4_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_40_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_40_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_4_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear0_4_41_out:
  .asciz "abcA "

.align 2
po_table_1_clear0_4_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_41_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_41_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_4_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear0_4_56_out:
  .asciz "abcV "

.align 2
po_table_1_clear0_4_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_56_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_56_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_4_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear0_4_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_clear0_4_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_4_7b_setup_regs:
  adr     x4, msg_po_table_1_clear0_4_7b_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear0_4_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_4_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_4_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_4_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_5_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear0_5_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear0_5_34_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_34_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_34_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_5_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear0_5_24_out:
  .asciz "abc$ "

.align 2
po_table_1_clear0_5_24_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_24_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_24_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_5_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear0_5_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear0_5_3c_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_3c_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_3c_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_5_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear0_5_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear0_5_23_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_23_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_23_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_5_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear0_5_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear0_5_40_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_40_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_40_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear0_5_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear0_5_41_out:
  .asciz "abcA "

.align 2
po_table_1_clear0_5_41_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_41_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_41_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_5_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear0_5_56_out:
  .asciz "abcV "

.align 2
po_table_1_clear0_5_56_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_56_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_56_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear0_5_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear0_5_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_clear0_5_7b_setup:
  _str    fake_channel_block, CURCHL
  _resbit 0, FLAGS
  ret

.align 2
po_table_1_clear0_5_7b_setup_regs:
  adr     x4, msg_po_table_1_clear0_5_7b_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear0_5_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear0_5_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear0_5_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear0_5_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_0_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear1_0_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear1_0_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_34_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_34_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_0_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear1_0_24_out:
  .asciz "abc$"

.align 2
po_table_1_clear1_0_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_24_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_24_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_0_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear1_0_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear1_0_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_3c_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_3c_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_0_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear1_0_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear1_0_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_23_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_23_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_0_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear1_0_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear1_0_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_40_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_40_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_0_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear1_0_41_out:
  .asciz "abcA"

.align 2
po_table_1_clear1_0_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_41_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_41_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_0_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear1_0_56_out:
  .asciz "abcV"

.align 2
po_table_1_clear1_0_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_56_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_56_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_0_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear1_0_7b_out:
  .asciz "abc{"

.align 2
po_table_1_clear1_0_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_0_7b_setup_regs:
  adr     x4, msg_po_table_1_clear1_0_7b_in
  mov     x5, #00
  clear_carry
  ret

.align 2
po_table_1_clear1_0_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_0_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_0_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_0_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear1_1_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear1_1_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_34_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_34_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear1_1_24_out:
  .asciz "abc$"

.align 2
po_table_1_clear1_1_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_24_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_24_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear1_1_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear1_1_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_3c_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_3c_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear1_1_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear1_1_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_23_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_23_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear1_1_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear1_1_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_40_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_40_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear1_1_41_out:
  .asciz "abcA"

.align 2
po_table_1_clear1_1_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_41_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_41_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear1_1_56_out:
  .asciz "abcV"

.align 2
po_table_1_clear1_1_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_56_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_56_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_1_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear1_1_7b_out:
  .asciz "abc{"

.align 2
po_table_1_clear1_1_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_1_7b_setup_regs:
  adr     x4, msg_po_table_1_clear1_1_7b_in
  mov     x5, #01
  clear_carry
  ret

.align 2
po_table_1_clear1_1_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_1_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_1_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_1_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear1_2_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear1_2_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_34_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_34_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear1_2_24_out:
  .asciz "abc$"

.align 2
po_table_1_clear1_2_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_24_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_24_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_24_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_24_out
  mov     x6, '$'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear1_2_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear1_2_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_3c_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_3c_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear1_2_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear1_2_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_23_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_23_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear1_2_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear1_2_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_40_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_40_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear1_2_41_out:
  .asciz "abcA"

.align 2
po_table_1_clear1_2_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_41_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_41_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_41_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_41_out
  mov     x6, 'A'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear1_2_56_out:
  .asciz "abcV"

.align 2
po_table_1_clear1_2_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_56_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_56_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_56_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_56_out
  mov     x6, 'V'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_2_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear1_2_7b_out:
  .asciz "abc{"

.align 2
po_table_1_clear1_2_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_2_7b_setup_regs:
  adr     x4, msg_po_table_1_clear1_2_7b_in
  mov     x5, #02
  clear_carry
  ret

.align 2
po_table_1_clear1_2_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_2_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_2_7b_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_2_7b_out
  mov     x6, '{'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_3_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear1_3_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear1_3_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_34_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_34_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_3_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear1_3_24_out:
  .asciz "abc$ "

.align 2
po_table_1_clear1_3_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_24_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_24_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_24_out
  mov     x6, '$'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear1_3_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear1_3_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear1_3_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_3c_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_3c_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_3_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear1_3_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear1_3_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_23_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_23_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_3_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear1_3_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear1_3_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_40_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_40_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_3_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear1_3_41_out:
  .asciz "abcA "

.align 2
po_table_1_clear1_3_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_41_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_41_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_41_out
  mov     x6, 'A'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear1_3_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear1_3_56_out:
  .asciz "abcV "

.align 2
po_table_1_clear1_3_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_56_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_56_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_56_out
  mov     x6, 'V'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear1_3_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear1_3_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_clear1_3_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_3_7b_setup_regs:
  adr     x4, msg_po_table_1_clear1_3_7b_in
  mov     x5, #03
  clear_carry
  ret

.align 2
po_table_1_clear1_3_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_3_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_3_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_3_7b_out
  mov     x6, '{'
  nzcv    #0b0110
  ret


.align 0
msg_po_table_1_clear1_4_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear1_4_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear1_4_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_34_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_34_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_4_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear1_4_24_out:
  .asciz "abc$ "

.align 2
po_table_1_clear1_4_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_24_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_24_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_4_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear1_4_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear1_4_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_3c_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_3c_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_4_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear1_4_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear1_4_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_23_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_23_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_4_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear1_4_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear1_4_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_40_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_40_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_4_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear1_4_41_out:
  .asciz "abcA "

.align 2
po_table_1_clear1_4_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_41_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_41_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_4_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear1_4_56_out:
  .asciz "abcV "

.align 2
po_table_1_clear1_4_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_56_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_56_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_4_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear1_4_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_clear1_4_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_4_7b_setup_regs:
  adr     x4, msg_po_table_1_clear1_4_7b_in
  mov     x5, #04
  clear_carry
  ret

.align 2
po_table_1_clear1_4_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_4_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_4_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_4_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_5_34_in:
  .asciz "abc4"

.align 0
msg_po_table_1_clear1_5_34_out:
  .asciz "abc4"

.align 2
po_table_1_clear1_5_34_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_34_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_34_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_34_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_34_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_34_out
  mov     x6, '4'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_5_24_in:
  .asciz "abc$"

.align 0
msg_po_table_1_clear1_5_24_out:
  .asciz "abc$ "

.align 2
po_table_1_clear1_5_24_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_24_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_24_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_24_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_24_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_24_out
  mov     x6, '$'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_5_3c_in:
  .asciz "abc<"

.align 0
msg_po_table_1_clear1_5_3c_out:
  .asciz "abc<"

.align 2
po_table_1_clear1_5_3c_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_3c_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_3c_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_3c_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_3c_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_3c_out
  mov     x6, '<'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_5_23_in:
  .asciz "abc#"

.align 0
msg_po_table_1_clear1_5_23_out:
  .asciz "abc#"

.align 2
po_table_1_clear1_5_23_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_23_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_23_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_23_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_23_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_23_out
  mov     x6, '#'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_5_40_in:
  .asciz "abc@"

.align 0
msg_po_table_1_clear1_5_40_out:
  .asciz "abc@"

.align 2
po_table_1_clear1_5_40_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_40_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_40_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_40_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_40_effects_regs:
  mov     x0, #0x00
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_40_out
  mov     x6, '@'
  nzcv    #0b1000
  ret


.align 0
msg_po_table_1_clear1_5_41_in:
  .asciz "abcA"

.align 0
msg_po_table_1_clear1_5_41_out:
  .asciz "abcA "

.align 2
po_table_1_clear1_5_41_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_41_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_41_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_41_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_41_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_41_out
  mov     x6, 'A'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_5_56_in:
  .asciz "abcV"

.align 0
msg_po_table_1_clear1_5_56_out:
  .asciz "abcV "

.align 2
po_table_1_clear1_5_56_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_56_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_56_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_56_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_56_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_56_out
  mov     x6, 'V'
  nzcv    #0b0010
  ret


.align 0
msg_po_table_1_clear1_5_7b_in:
  .asciz "abc{"

.align 0
msg_po_table_1_clear1_5_7b_out:
  .asciz "abc{ "

.align 2
po_table_1_clear1_5_7b_setup:
  _str    fake_channel_block, CURCHL
  _setbit 0, FLAGS
  ret

.align 2
po_table_1_clear1_5_7b_setup_regs:
  adr     x4, msg_po_table_1_clear1_5_7b_in
  mov     x5, #05
  clear_carry
  ret

.align 2
po_table_1_clear1_5_7b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_table_1_clear1_5_7b_out
  bl      print_string                            // Expected output.
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_table_1_clear1_5_7b_effects_regs:
  mov     x0, ' '
  adr     x1, fake_printout
  adr     x4, msg_po_table_1_clear1_5_7b_out
  mov     x6, '{'
  nzcv    #0b0010
  ret
