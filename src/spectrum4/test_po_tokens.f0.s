# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

# This file is auto-generated by test_po_tokens.sh. DO NOT EDIT!

.text




.align 2
# Test po_tokens_0f00 tests po_tokens when passed w3=0x00 (BASIC keyword "RND")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "RND".
po_tokens_0f00_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f00_setup_regs:
  mov     w3, 0x00
  ret

.align 2
po_tokens_0f00_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f00
  bl      print_string                            // Expect output "RND"
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f00_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+6
  mov     x5, 0x00
  mov     x6, 'D'
  ret

.align 0
msg_po_tokens_0f00: .asciz "RND"


.align 2
# Test po_tokens_0f01 tests po_tokens when passed w3=0x01 (BASIC keyword "INKEY$")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "INKEY$".
po_tokens_0f01_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f01_setup_regs:
  mov     w3, 0x01
  ret

.align 2
po_tokens_0f01_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f01
  bl      print_string                            // Expect output "INKEY$"
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f01_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+13
  mov     x5, 0x01
  mov     x6, '$'
  ret

.align 0
msg_po_tokens_0f01: .asciz "INKEY$"


.align 2
# Test po_tokens_0f02 tests po_tokens when passed w3=0x02 (BASIC keyword "PI")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "PI".
po_tokens_0f02_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f02_setup_regs:
  mov     w3, 0x02
  ret

.align 2
po_tokens_0f02_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f02
  bl      print_string                            // Expect output "PI"
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f02_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+16
  mov     x5, 0x02
  mov     x6, 'I'
  ret

.align 0
msg_po_tokens_0f02: .asciz "PI"


.align 2
# Test po_tokens_0f03 tests po_tokens when passed w3=0x03 (BASIC keyword "FN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "FN ".
po_tokens_0f03_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f03_setup_regs:
  mov     w3, 0x03
  ret

.align 2
po_tokens_0f03_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f03
  bl      print_string                            // Expect output "FN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f03_effects_regs:
  mov     x0, ' '
  nzcv    0b0110
  adr     x1, fake_printout
  adr     x4, tkn_table+19
  mov     x5, 0x03
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f03: .asciz "FN "


.align 2
# Test po_tokens_0f04 tests po_tokens when passed w3=0x04 (BASIC keyword "POINT")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "POINT ".
po_tokens_0f04_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f04_setup_regs:
  mov     w3, 0x04
  ret

.align 2
po_tokens_0f04_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f04
  bl      print_string                            // Expect output "POINT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f04_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+25
  mov     x5, 0x04
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f04: .asciz "POINT "


.align 2
# Test po_tokens_0f05 tests po_tokens when passed w3=0x05 (BASIC keyword "SCREEN$")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "SCREEN$ ".
po_tokens_0f05_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f05_setup_regs:
  mov     w3, 0x05
  ret

.align 2
po_tokens_0f05_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f05
  bl      print_string                            // Expect output "SCREEN$ "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f05_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+33
  mov     x5, 0x05
  mov     x6, '$'
  ret

.align 0
msg_po_tokens_0f05: .asciz "SCREEN$ "


.align 2
# Test po_tokens_0f06 tests po_tokens when passed w3=0x06 (BASIC keyword "ATTR")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "ATTR ".
po_tokens_0f06_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f06_setup_regs:
  mov     w3, 0x06
  ret

.align 2
po_tokens_0f06_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f06
  bl      print_string                            // Expect output "ATTR "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f06_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+38
  mov     x5, 0x06
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f06: .asciz "ATTR "


.align 2
# Test po_tokens_0f07 tests po_tokens when passed w3=0x07 (BASIC keyword "AT")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "AT ".
po_tokens_0f07_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f07_setup_regs:
  mov     w3, 0x07
  ret

.align 2
po_tokens_0f07_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f07
  bl      print_string                            // Expect output "AT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f07_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+41
  mov     x5, 0x07
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f07: .asciz "AT "


.align 2
# Test po_tokens_0f08 tests po_tokens when passed w3=0x08 (BASIC keyword "TAB")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "TAB ".
po_tokens_0f08_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f08_setup_regs:
  mov     w3, 0x08
  ret

.align 2
po_tokens_0f08_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f08
  bl      print_string                            // Expect output "TAB "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f08_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+45
  mov     x5, 0x08
  mov     x6, 'B'
  ret

.align 0
msg_po_tokens_0f08: .asciz "TAB "


.align 2
# Test po_tokens_0f09 tests po_tokens when passed w3=0x09 (BASIC keyword "VAL$")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "VAL$ ".
po_tokens_0f09_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f09_setup_regs:
  mov     w3, 0x09
  ret

.align 2
po_tokens_0f09_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f09
  bl      print_string                            // Expect output "VAL$ "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f09_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+50
  mov     x5, 0x09
  mov     x6, '$'
  ret

.align 0
msg_po_tokens_0f09: .asciz "VAL$ "


.align 2
# Test po_tokens_0f0a tests po_tokens when passed w3=0x0a (BASIC keyword "CODE")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "CODE ".
po_tokens_0f0a_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f0a_setup_regs:
  mov     w3, 0x0a
  ret

.align 2
po_tokens_0f0a_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f0a
  bl      print_string                            // Expect output "CODE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f0a_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+55
  mov     x5, 0x0a
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f0a: .asciz "CODE "


.align 2
# Test po_tokens_0f0b tests po_tokens when passed w3=0x0b (BASIC keyword "VAL")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "VAL ".
po_tokens_0f0b_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f0b_setup_regs:
  mov     w3, 0x0b
  ret

.align 2
po_tokens_0f0b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f0b
  bl      print_string                            // Expect output "VAL "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f0b_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+59
  mov     x5, 0x0b
  mov     x6, 'L'
  ret

.align 0
msg_po_tokens_0f0b: .asciz "VAL "


.align 2
# Test po_tokens_0f0c tests po_tokens when passed w3=0x0c (BASIC keyword "LEN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "LEN ".
po_tokens_0f0c_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f0c_setup_regs:
  mov     w3, 0x0c
  ret

.align 2
po_tokens_0f0c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f0c
  bl      print_string                            // Expect output "LEN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f0c_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+63
  mov     x5, 0x0c
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f0c: .asciz "LEN "


.align 2
# Test po_tokens_0f0d tests po_tokens when passed w3=0x0d (BASIC keyword "SIN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "SIN ".
po_tokens_0f0d_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f0d_setup_regs:
  mov     w3, 0x0d
  ret

.align 2
po_tokens_0f0d_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f0d
  bl      print_string                            // Expect output "SIN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f0d_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+67
  mov     x5, 0x0d
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f0d: .asciz "SIN "


.align 2
# Test po_tokens_0f0e tests po_tokens when passed w3=0x0e (BASIC keyword "COS")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "COS ".
po_tokens_0f0e_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f0e_setup_regs:
  mov     w3, 0x0e
  ret

.align 2
po_tokens_0f0e_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f0e
  bl      print_string                            // Expect output "COS "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f0e_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+71
  mov     x5, 0x0e
  mov     x6, 'S'
  ret

.align 0
msg_po_tokens_0f0e: .asciz "COS "


.align 2
# Test po_tokens_0f0f tests po_tokens when passed w3=0x0f (BASIC keyword "TAN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "TAN ".
po_tokens_0f0f_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f0f_setup_regs:
  mov     w3, 0x0f
  ret

.align 2
po_tokens_0f0f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f0f
  bl      print_string                            // Expect output "TAN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f0f_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+75
  mov     x5, 0x0f
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f0f: .asciz "TAN "


.align 2
# Test po_tokens_0f10 tests po_tokens when passed w3=0x10 (BASIC keyword "ASN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "ASN ".
po_tokens_0f10_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f10_setup_regs:
  mov     w3, 0x10
  ret

.align 2
po_tokens_0f10_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f10
  bl      print_string                            // Expect output "ASN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f10_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+79
  mov     x5, 0x10
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f10: .asciz "ASN "


.align 2
# Test po_tokens_0f11 tests po_tokens when passed w3=0x11 (BASIC keyword "ACS")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "ACS ".
po_tokens_0f11_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f11_setup_regs:
  mov     w3, 0x11
  ret

.align 2
po_tokens_0f11_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f11
  bl      print_string                            // Expect output "ACS "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f11_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+83
  mov     x5, 0x11
  mov     x6, 'S'
  ret

.align 0
msg_po_tokens_0f11: .asciz "ACS "


.align 2
# Test po_tokens_0f12 tests po_tokens when passed w3=0x12 (BASIC keyword "ATN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "ATN ".
po_tokens_0f12_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f12_setup_regs:
  mov     w3, 0x12
  ret

.align 2
po_tokens_0f12_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f12
  bl      print_string                            // Expect output "ATN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f12_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+87
  mov     x5, 0x12
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f12: .asciz "ATN "


.align 2
# Test po_tokens_0f13 tests po_tokens when passed w3=0x13 (BASIC keyword "LN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "LN ".
po_tokens_0f13_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f13_setup_regs:
  mov     w3, 0x13
  ret

.align 2
po_tokens_0f13_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f13
  bl      print_string                            // Expect output "LN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f13_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+90
  mov     x5, 0x13
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f13: .asciz "LN "


.align 2
# Test po_tokens_0f14 tests po_tokens when passed w3=0x14 (BASIC keyword "EXP")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "EXP ".
po_tokens_0f14_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f14_setup_regs:
  mov     w3, 0x14
  ret

.align 2
po_tokens_0f14_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f14
  bl      print_string                            // Expect output "EXP "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f14_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+94
  mov     x5, 0x14
  mov     x6, 'P'
  ret

.align 0
msg_po_tokens_0f14: .asciz "EXP "


.align 2
# Test po_tokens_0f15 tests po_tokens when passed w3=0x15 (BASIC keyword "INT")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "INT ".
po_tokens_0f15_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f15_setup_regs:
  mov     w3, 0x15
  ret

.align 2
po_tokens_0f15_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f15
  bl      print_string                            // Expect output "INT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f15_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+98
  mov     x5, 0x15
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f15: .asciz "INT "


.align 2
# Test po_tokens_0f16 tests po_tokens when passed w3=0x16 (BASIC keyword "SQR")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "SQR ".
po_tokens_0f16_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f16_setup_regs:
  mov     w3, 0x16
  ret

.align 2
po_tokens_0f16_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f16
  bl      print_string                            // Expect output "SQR "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f16_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+102
  mov     x5, 0x16
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f16: .asciz "SQR "


.align 2
# Test po_tokens_0f17 tests po_tokens when passed w3=0x17 (BASIC keyword "SGN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "SGN ".
po_tokens_0f17_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f17_setup_regs:
  mov     w3, 0x17
  ret

.align 2
po_tokens_0f17_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f17
  bl      print_string                            // Expect output "SGN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f17_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+106
  mov     x5, 0x17
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f17: .asciz "SGN "


.align 2
# Test po_tokens_0f18 tests po_tokens when passed w3=0x18 (BASIC keyword "ABS")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "ABS ".
po_tokens_0f18_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f18_setup_regs:
  mov     w3, 0x18
  ret

.align 2
po_tokens_0f18_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f18
  bl      print_string                            // Expect output "ABS "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f18_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+110
  mov     x5, 0x18
  mov     x6, 'S'
  ret

.align 0
msg_po_tokens_0f18: .asciz "ABS "


.align 2
# Test po_tokens_0f19 tests po_tokens when passed w3=0x19 (BASIC keyword "PEEK")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "PEEK ".
po_tokens_0f19_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f19_setup_regs:
  mov     w3, 0x19
  ret

.align 2
po_tokens_0f19_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f19
  bl      print_string                            // Expect output "PEEK "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f19_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+115
  mov     x5, 0x19
  mov     x6, 'K'
  ret

.align 0
msg_po_tokens_0f19: .asciz "PEEK "


.align 2
# Test po_tokens_0f1a tests po_tokens when passed w3=0x1a (BASIC keyword "IN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "IN ".
po_tokens_0f1a_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f1a_setup_regs:
  mov     w3, 0x1a
  ret

.align 2
po_tokens_0f1a_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f1a
  bl      print_string                            // Expect output "IN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f1a_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+118
  mov     x5, 0x1a
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f1a: .asciz "IN "


.align 2
# Test po_tokens_0f1b tests po_tokens when passed w3=0x1b (BASIC keyword "USR")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "USR ".
po_tokens_0f1b_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f1b_setup_regs:
  mov     w3, 0x1b
  ret

.align 2
po_tokens_0f1b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f1b
  bl      print_string                            // Expect output "USR "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f1b_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+122
  mov     x5, 0x1b
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f1b: .asciz "USR "


.align 2
# Test po_tokens_0f1c tests po_tokens when passed w3=0x1c (BASIC keyword "STR$")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "STR$ ".
po_tokens_0f1c_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f1c_setup_regs:
  mov     w3, 0x1c
  ret

.align 2
po_tokens_0f1c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f1c
  bl      print_string                            // Expect output "STR$ "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f1c_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+127
  mov     x5, 0x1c
  mov     x6, '$'
  ret

.align 0
msg_po_tokens_0f1c: .asciz "STR$ "


.align 2
# Test po_tokens_0f1d tests po_tokens when passed w3=0x1d (BASIC keyword "CHR$")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "CHR$ ".
po_tokens_0f1d_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f1d_setup_regs:
  mov     w3, 0x1d
  ret

.align 2
po_tokens_0f1d_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f1d
  bl      print_string                            // Expect output "CHR$ "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f1d_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+132
  mov     x5, 0x1d
  mov     x6, '$'
  ret

.align 0
msg_po_tokens_0f1d: .asciz "CHR$ "


.align 2
# Test po_tokens_0f1e tests po_tokens when passed w3=0x1e (BASIC keyword "NOT")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "NOT ".
po_tokens_0f1e_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f1e_setup_regs:
  mov     w3, 0x1e
  ret

.align 2
po_tokens_0f1e_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f1e
  bl      print_string                            // Expect output "NOT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f1e_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+136
  mov     x5, 0x1e
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f1e: .asciz "NOT "


.align 2
# Test po_tokens_0f1f tests po_tokens when passed w3=0x1f (BASIC keyword "BIN")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "BIN ".
po_tokens_0f1f_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f1f_setup_regs:
  mov     w3, 0x1f
  ret

.align 2
po_tokens_0f1f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f1f
  bl      print_string                            // Expect output "BIN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f1f_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+140
  mov     x5, 0x1f
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f1f: .asciz "BIN "


.align 2
# Test po_tokens_0f20 tests po_tokens when passed w3=0x20 (BASIC keyword "OR")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " OR ".
po_tokens_0f20_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f20_setup_regs:
  mov     w3, 0x20
  ret

.align 2
po_tokens_0f20_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f20
  bl      print_string                            // Expect output " OR "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f20_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+143
  mov     x5, 0x20
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f20: .asciz " OR "


.align 2
# Test po_tokens_0f21 tests po_tokens when passed w3=0x21 (BASIC keyword "AND")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " AND ".
po_tokens_0f21_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f21_setup_regs:
  mov     w3, 0x21
  ret

.align 2
po_tokens_0f21_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f21
  bl      print_string                            // Expect output " AND "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f21_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+147
  mov     x5, 0x21
  mov     x6, 'D'
  ret

.align 0
msg_po_tokens_0f21: .asciz " AND "


.align 2
# Test po_tokens_0f22 tests po_tokens when passed w3=0x22 (BASIC keyword "<=")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "<=".
po_tokens_0f22_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f22_setup_regs:
  mov     w3, 0x22
  ret

.align 2
po_tokens_0f22_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f22
  bl      print_string                            // Expect output "<="
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f22_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+150
  mov     x5, 0x22
  mov     x6, '='
  ret

.align 0
msg_po_tokens_0f22: .asciz "<="


.align 2
# Test po_tokens_0f23 tests po_tokens when passed w3=0x23 (BASIC keyword ">=")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is ">=".
po_tokens_0f23_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f23_setup_regs:
  mov     w3, 0x23
  ret

.align 2
po_tokens_0f23_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f23
  bl      print_string                            // Expect output ">="
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f23_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+153
  mov     x5, 0x23
  mov     x6, '='
  ret

.align 0
msg_po_tokens_0f23: .asciz ">="


.align 2
# Test po_tokens_0f24 tests po_tokens when passed w3=0x24 (BASIC keyword "<>")
# with bit 0 of [FLAGS] set to 0 (leading space suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is "<>".
po_tokens_0f24_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space suppressed

.align 2
po_tokens_0f24_setup_regs:
  mov     w3, 0x24
  ret

.align 2
po_tokens_0f24_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f24
  bl      print_string                            // Expect output "<>"
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f24_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+156
  mov     x5, 0x24
  mov     x6, '>'
  ret

.align 0
msg_po_tokens_0f24: .asciz "<>"


.align 2
# Test po_tokens_0f25 tests po_tokens when passed w3=0x25 (BASIC keyword "LINE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " LINE ".
po_tokens_0f25_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f25_setup_regs:
  mov     w3, 0x25
  ret

.align 2
po_tokens_0f25_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f25
  bl      print_string                            // Expect output " LINE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f25_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+161
  mov     x5, 0x25
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f25: .asciz " LINE "


.align 2
# Test po_tokens_0f26 tests po_tokens when passed w3=0x26 (BASIC keyword "THEN")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " THEN ".
po_tokens_0f26_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f26_setup_regs:
  mov     w3, 0x26
  ret

.align 2
po_tokens_0f26_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f26
  bl      print_string                            // Expect output " THEN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f26_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+166
  mov     x5, 0x26
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f26: .asciz " THEN "


.align 2
# Test po_tokens_0f27 tests po_tokens when passed w3=0x27 (BASIC keyword "TO")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " TO ".
po_tokens_0f27_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f27_setup_regs:
  mov     w3, 0x27
  ret

.align 2
po_tokens_0f27_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f27
  bl      print_string                            // Expect output " TO "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f27_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+169
  mov     x5, 0x27
  mov     x6, 'O'
  ret

.align 0
msg_po_tokens_0f27: .asciz " TO "


.align 2
# Test po_tokens_0f28 tests po_tokens when passed w3=0x28 (BASIC keyword "STEP")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " STEP ".
po_tokens_0f28_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f28_setup_regs:
  mov     w3, 0x28
  ret

.align 2
po_tokens_0f28_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f28
  bl      print_string                            // Expect output " STEP "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f28_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+174
  mov     x5, 0x28
  mov     x6, 'P'
  ret

.align 0
msg_po_tokens_0f28: .asciz " STEP "


.align 2
# Test po_tokens_0f29 tests po_tokens when passed w3=0x29 (BASIC keyword "DEF FN")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " DEF FN ".
po_tokens_0f29_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f29_setup_regs:
  mov     w3, 0x29
  ret

.align 2
po_tokens_0f29_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f29
  bl      print_string                            // Expect output " DEF FN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f29_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+181
  mov     x5, 0x29
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f29: .asciz " DEF FN "


.align 2
# Test po_tokens_0f2a tests po_tokens when passed w3=0x2a (BASIC keyword "CAT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " CAT ".
po_tokens_0f2a_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f2a_setup_regs:
  mov     w3, 0x2a
  ret

.align 2
po_tokens_0f2a_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f2a
  bl      print_string                            // Expect output " CAT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f2a_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+185
  mov     x5, 0x2a
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f2a: .asciz " CAT "


.align 2
# Test po_tokens_0f2b tests po_tokens when passed w3=0x2b (BASIC keyword "FORMAT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " FORMAT ".
po_tokens_0f2b_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f2b_setup_regs:
  mov     w3, 0x2b
  ret

.align 2
po_tokens_0f2b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f2b
  bl      print_string                            // Expect output " FORMAT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f2b_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+192
  mov     x5, 0x2b
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f2b: .asciz " FORMAT "


.align 2
# Test po_tokens_0f2c tests po_tokens when passed w3=0x2c (BASIC keyword "MOVE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " MOVE ".
po_tokens_0f2c_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f2c_setup_regs:
  mov     w3, 0x2c
  ret

.align 2
po_tokens_0f2c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f2c
  bl      print_string                            // Expect output " MOVE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f2c_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+197
  mov     x5, 0x2c
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f2c: .asciz " MOVE "


.align 2
# Test po_tokens_0f2d tests po_tokens when passed w3=0x2d (BASIC keyword "ERASE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " ERASE ".
po_tokens_0f2d_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f2d_setup_regs:
  mov     w3, 0x2d
  ret

.align 2
po_tokens_0f2d_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f2d
  bl      print_string                            // Expect output " ERASE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f2d_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+203
  mov     x5, 0x2d
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f2d: .asciz " ERASE "


.align 2
# Test po_tokens_0f2e tests po_tokens when passed w3=0x2e (BASIC keyword "OPEN #")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " OPEN #".
po_tokens_0f2e_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f2e_setup_regs:
  mov     w3, 0x2e
  ret

.align 2
po_tokens_0f2e_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f2e
  bl      print_string                            // Expect output " OPEN #"
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f2e_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+210
  mov     x5, 0x2e
  mov     x6, '#'
  ret

.align 0
msg_po_tokens_0f2e: .asciz " OPEN #"


.align 2
# Test po_tokens_0f2f tests po_tokens when passed w3=0x2f (BASIC keyword "CLOSE #")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " CLOSE #".
po_tokens_0f2f_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f2f_setup_regs:
  mov     w3, 0x2f
  ret

.align 2
po_tokens_0f2f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f2f
  bl      print_string                            // Expect output " CLOSE #"
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f2f_effects_regs:
  mov     x0, #0x0
  nzcv    0b1000
  adr     x1, fake_printout
  adr     x4, tkn_table+218
  mov     x5, 0x2f
  mov     x6, '#'
  ret

.align 0
msg_po_tokens_0f2f: .asciz " CLOSE #"


.align 2
# Test po_tokens_0f30 tests po_tokens when passed w3=0x30 (BASIC keyword "MERGE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " MERGE ".
po_tokens_0f30_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f30_setup_regs:
  mov     w3, 0x30
  ret

.align 2
po_tokens_0f30_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f30
  bl      print_string                            // Expect output " MERGE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f30_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+224
  mov     x5, 0x30
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f30: .asciz " MERGE "


.align 2
# Test po_tokens_0f31 tests po_tokens when passed w3=0x31 (BASIC keyword "VERIFY")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " VERIFY ".
po_tokens_0f31_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f31_setup_regs:
  mov     w3, 0x31
  ret

.align 2
po_tokens_0f31_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f31
  bl      print_string                            // Expect output " VERIFY "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f31_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+231
  mov     x5, 0x31
  mov     x6, 'Y'
  ret

.align 0
msg_po_tokens_0f31: .asciz " VERIFY "


.align 2
# Test po_tokens_0f32 tests po_tokens when passed w3=0x32 (BASIC keyword "BEEP")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " BEEP ".
po_tokens_0f32_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f32_setup_regs:
  mov     w3, 0x32
  ret

.align 2
po_tokens_0f32_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f32
  bl      print_string                            // Expect output " BEEP "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f32_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+236
  mov     x5, 0x32
  mov     x6, 'P'
  ret

.align 0
msg_po_tokens_0f32: .asciz " BEEP "


.align 2
# Test po_tokens_0f33 tests po_tokens when passed w3=0x33 (BASIC keyword "CIRCLE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " CIRCLE ".
po_tokens_0f33_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f33_setup_regs:
  mov     w3, 0x33
  ret

.align 2
po_tokens_0f33_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f33
  bl      print_string                            // Expect output " CIRCLE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f33_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+243
  mov     x5, 0x33
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f33: .asciz " CIRCLE "


.align 2
# Test po_tokens_0f34 tests po_tokens when passed w3=0x34 (BASIC keyword "INK")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " INK ".
po_tokens_0f34_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f34_setup_regs:
  mov     w3, 0x34
  ret

.align 2
po_tokens_0f34_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f34
  bl      print_string                            // Expect output " INK "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f34_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+247
  mov     x5, 0x34
  mov     x6, 'K'
  ret

.align 0
msg_po_tokens_0f34: .asciz " INK "


.align 2
# Test po_tokens_0f35 tests po_tokens when passed w3=0x35 (BASIC keyword "PAPER")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " PAPER ".
po_tokens_0f35_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f35_setup_regs:
  mov     w3, 0x35
  ret

.align 2
po_tokens_0f35_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f35
  bl      print_string                            // Expect output " PAPER "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f35_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+253
  mov     x5, 0x35
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f35: .asciz " PAPER "


.align 2
# Test po_tokens_0f36 tests po_tokens when passed w3=0x36 (BASIC keyword "FLASH")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " FLASH ".
po_tokens_0f36_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f36_setup_regs:
  mov     w3, 0x36
  ret

.align 2
po_tokens_0f36_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f36
  bl      print_string                            // Expect output " FLASH "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f36_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+259
  mov     x5, 0x36
  mov     x6, 'H'
  ret

.align 0
msg_po_tokens_0f36: .asciz " FLASH "


.align 2
# Test po_tokens_0f37 tests po_tokens when passed w3=0x37 (BASIC keyword "BRIGHT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " BRIGHT ".
po_tokens_0f37_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f37_setup_regs:
  mov     w3, 0x37
  ret

.align 2
po_tokens_0f37_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f37
  bl      print_string                            // Expect output " BRIGHT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f37_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+266
  mov     x5, 0x37
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f37: .asciz " BRIGHT "


.align 2
# Test po_tokens_0f38 tests po_tokens when passed w3=0x38 (BASIC keyword "INVERSE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " INVERSE ".
po_tokens_0f38_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f38_setup_regs:
  mov     w3, 0x38
  ret

.align 2
po_tokens_0f38_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f38
  bl      print_string                            // Expect output " INVERSE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f38_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+274
  mov     x5, 0x38
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f38: .asciz " INVERSE "


.align 2
# Test po_tokens_0f39 tests po_tokens when passed w3=0x39 (BASIC keyword "OVER")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " OVER ".
po_tokens_0f39_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f39_setup_regs:
  mov     w3, 0x39
  ret

.align 2
po_tokens_0f39_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f39
  bl      print_string                            // Expect output " OVER "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f39_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+279
  mov     x5, 0x39
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f39: .asciz " OVER "


.align 2
# Test po_tokens_0f3a tests po_tokens when passed w3=0x3a (BASIC keyword "OUT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " OUT ".
po_tokens_0f3a_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f3a_setup_regs:
  mov     w3, 0x3a
  ret

.align 2
po_tokens_0f3a_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f3a
  bl      print_string                            // Expect output " OUT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f3a_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+283
  mov     x5, 0x3a
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f3a: .asciz " OUT "


.align 2
# Test po_tokens_0f3b tests po_tokens when passed w3=0x3b (BASIC keyword "LPRINT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " LPRINT ".
po_tokens_0f3b_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f3b_setup_regs:
  mov     w3, 0x3b
  ret

.align 2
po_tokens_0f3b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f3b
  bl      print_string                            // Expect output " LPRINT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f3b_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+290
  mov     x5, 0x3b
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f3b: .asciz " LPRINT "


.align 2
# Test po_tokens_0f3c tests po_tokens when passed w3=0x3c (BASIC keyword "LLIST")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " LLIST ".
po_tokens_0f3c_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f3c_setup_regs:
  mov     w3, 0x3c
  ret

.align 2
po_tokens_0f3c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f3c
  bl      print_string                            // Expect output " LLIST "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f3c_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+296
  mov     x5, 0x3c
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f3c: .asciz " LLIST "


.align 2
# Test po_tokens_0f3d tests po_tokens when passed w3=0x3d (BASIC keyword "STOP")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " STOP ".
po_tokens_0f3d_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f3d_setup_regs:
  mov     w3, 0x3d
  ret

.align 2
po_tokens_0f3d_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f3d
  bl      print_string                            // Expect output " STOP "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f3d_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+301
  mov     x5, 0x3d
  mov     x6, 'P'
  ret

.align 0
msg_po_tokens_0f3d: .asciz " STOP "


.align 2
# Test po_tokens_0f3e tests po_tokens when passed w3=0x3e (BASIC keyword "READ")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " READ ".
po_tokens_0f3e_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f3e_setup_regs:
  mov     w3, 0x3e
  ret

.align 2
po_tokens_0f3e_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f3e
  bl      print_string                            // Expect output " READ "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f3e_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+306
  mov     x5, 0x3e
  mov     x6, 'D'
  ret

.align 0
msg_po_tokens_0f3e: .asciz " READ "


.align 2
# Test po_tokens_0f3f tests po_tokens when passed w3=0x3f (BASIC keyword "DATA")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " DATA ".
po_tokens_0f3f_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f3f_setup_regs:
  mov     w3, 0x3f
  ret

.align 2
po_tokens_0f3f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f3f
  bl      print_string                            // Expect output " DATA "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f3f_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+311
  mov     x5, 0x3f
  mov     x6, 'A'
  ret

.align 0
msg_po_tokens_0f3f: .asciz " DATA "


.align 2
# Test po_tokens_0f40 tests po_tokens when passed w3=0x40 (BASIC keyword "RESTORE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " RESTORE ".
po_tokens_0f40_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f40_setup_regs:
  mov     w3, 0x40
  ret

.align 2
po_tokens_0f40_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f40
  bl      print_string                            // Expect output " RESTORE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f40_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+319
  mov     x5, 0x40
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f40: .asciz " RESTORE "


.align 2
# Test po_tokens_0f41 tests po_tokens when passed w3=0x41 (BASIC keyword "NEW")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " NEW ".
po_tokens_0f41_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f41_setup_regs:
  mov     w3, 0x41
  ret

.align 2
po_tokens_0f41_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f41
  bl      print_string                            // Expect output " NEW "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f41_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+323
  mov     x5, 0x41
  mov     x6, 'W'
  ret

.align 0
msg_po_tokens_0f41: .asciz " NEW "


.align 2
# Test po_tokens_0f42 tests po_tokens when passed w3=0x42 (BASIC keyword "BORDER")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " BORDER ".
po_tokens_0f42_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f42_setup_regs:
  mov     w3, 0x42
  ret

.align 2
po_tokens_0f42_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f42
  bl      print_string                            // Expect output " BORDER "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f42_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+330
  mov     x5, 0x42
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f42: .asciz " BORDER "


.align 2
# Test po_tokens_0f43 tests po_tokens when passed w3=0x43 (BASIC keyword "CONTINUE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " CONTINUE ".
po_tokens_0f43_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f43_setup_regs:
  mov     w3, 0x43
  ret

.align 2
po_tokens_0f43_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f43
  bl      print_string                            // Expect output " CONTINUE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f43_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+339
  mov     x5, 0x43
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f43: .asciz " CONTINUE "


.align 2
# Test po_tokens_0f44 tests po_tokens when passed w3=0x44 (BASIC keyword "DIM")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " DIM ".
po_tokens_0f44_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f44_setup_regs:
  mov     w3, 0x44
  ret

.align 2
po_tokens_0f44_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f44
  bl      print_string                            // Expect output " DIM "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f44_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+343
  mov     x5, 0x44
  mov     x6, 'M'
  ret

.align 0
msg_po_tokens_0f44: .asciz " DIM "


.align 2
# Test po_tokens_0f45 tests po_tokens when passed w3=0x45 (BASIC keyword "REM")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " REM ".
po_tokens_0f45_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f45_setup_regs:
  mov     w3, 0x45
  ret

.align 2
po_tokens_0f45_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f45
  bl      print_string                            // Expect output " REM "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f45_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+347
  mov     x5, 0x45
  mov     x6, 'M'
  ret

.align 0
msg_po_tokens_0f45: .asciz " REM "


.align 2
# Test po_tokens_0f46 tests po_tokens when passed w3=0x46 (BASIC keyword "FOR")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " FOR ".
po_tokens_0f46_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f46_setup_regs:
  mov     w3, 0x46
  ret

.align 2
po_tokens_0f46_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f46
  bl      print_string                            // Expect output " FOR "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f46_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+351
  mov     x5, 0x46
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f46: .asciz " FOR "


.align 2
# Test po_tokens_0f47 tests po_tokens when passed w3=0x47 (BASIC keyword "GO TO")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " GO TO ".
po_tokens_0f47_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f47_setup_regs:
  mov     w3, 0x47
  ret

.align 2
po_tokens_0f47_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f47
  bl      print_string                            // Expect output " GO TO "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f47_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+357
  mov     x5, 0x47
  mov     x6, 'O'
  ret

.align 0
msg_po_tokens_0f47: .asciz " GO TO "


.align 2
# Test po_tokens_0f48 tests po_tokens when passed w3=0x48 (BASIC keyword "GO SUB")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " GO SUB ".
po_tokens_0f48_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f48_setup_regs:
  mov     w3, 0x48
  ret

.align 2
po_tokens_0f48_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f48
  bl      print_string                            // Expect output " GO SUB "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f48_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+364
  mov     x5, 0x48
  mov     x6, 'B'
  ret

.align 0
msg_po_tokens_0f48: .asciz " GO SUB "


.align 2
# Test po_tokens_0f49 tests po_tokens when passed w3=0x49 (BASIC keyword "INPUT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " INPUT ".
po_tokens_0f49_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f49_setup_regs:
  mov     w3, 0x49
  ret

.align 2
po_tokens_0f49_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f49
  bl      print_string                            // Expect output " INPUT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f49_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+370
  mov     x5, 0x49
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f49: .asciz " INPUT "


.align 2
# Test po_tokens_0f4a tests po_tokens when passed w3=0x4a (BASIC keyword "LOAD")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " LOAD ".
po_tokens_0f4a_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f4a_setup_regs:
  mov     w3, 0x4a
  ret

.align 2
po_tokens_0f4a_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f4a
  bl      print_string                            // Expect output " LOAD "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f4a_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+375
  mov     x5, 0x4a
  mov     x6, 'D'
  ret

.align 0
msg_po_tokens_0f4a: .asciz " LOAD "


.align 2
# Test po_tokens_0f4b tests po_tokens when passed w3=0x4b (BASIC keyword "LIST")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " LIST ".
po_tokens_0f4b_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f4b_setup_regs:
  mov     w3, 0x4b
  ret

.align 2
po_tokens_0f4b_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f4b
  bl      print_string                            // Expect output " LIST "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f4b_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+380
  mov     x5, 0x4b
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f4b: .asciz " LIST "


.align 2
# Test po_tokens_0f4c tests po_tokens when passed w3=0x4c (BASIC keyword "LET")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " LET ".
po_tokens_0f4c_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f4c_setup_regs:
  mov     w3, 0x4c
  ret

.align 2
po_tokens_0f4c_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f4c
  bl      print_string                            // Expect output " LET "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f4c_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+384
  mov     x5, 0x4c
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f4c: .asciz " LET "


.align 2
# Test po_tokens_0f4d tests po_tokens when passed w3=0x4d (BASIC keyword "PAUSE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " PAUSE ".
po_tokens_0f4d_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f4d_setup_regs:
  mov     w3, 0x4d
  ret

.align 2
po_tokens_0f4d_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f4d
  bl      print_string                            // Expect output " PAUSE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f4d_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+390
  mov     x5, 0x4d
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f4d: .asciz " PAUSE "


.align 2
# Test po_tokens_0f4e tests po_tokens when passed w3=0x4e (BASIC keyword "NEXT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " NEXT ".
po_tokens_0f4e_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f4e_setup_regs:
  mov     w3, 0x4e
  ret

.align 2
po_tokens_0f4e_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f4e
  bl      print_string                            // Expect output " NEXT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f4e_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+395
  mov     x5, 0x4e
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f4e: .asciz " NEXT "


.align 2
# Test po_tokens_0f4f tests po_tokens when passed w3=0x4f (BASIC keyword "POKE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " POKE ".
po_tokens_0f4f_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f4f_setup_regs:
  mov     w3, 0x4f
  ret

.align 2
po_tokens_0f4f_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f4f
  bl      print_string                            // Expect output " POKE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f4f_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+400
  mov     x5, 0x4f
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f4f: .asciz " POKE "


.align 2
# Test po_tokens_0f50 tests po_tokens when passed w3=0x50 (BASIC keyword "PRINT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " PRINT ".
po_tokens_0f50_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f50_setup_regs:
  mov     w3, 0x50
  ret

.align 2
po_tokens_0f50_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f50
  bl      print_string                            // Expect output " PRINT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f50_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+406
  mov     x5, 0x50
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f50: .asciz " PRINT "


.align 2
# Test po_tokens_0f51 tests po_tokens when passed w3=0x51 (BASIC keyword "PLOT")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " PLOT ".
po_tokens_0f51_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f51_setup_regs:
  mov     w3, 0x51
  ret

.align 2
po_tokens_0f51_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f51
  bl      print_string                            // Expect output " PLOT "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f51_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+411
  mov     x5, 0x51
  mov     x6, 'T'
  ret

.align 0
msg_po_tokens_0f51: .asciz " PLOT "


.align 2
# Test po_tokens_0f52 tests po_tokens when passed w3=0x52 (BASIC keyword "RUN")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " RUN ".
po_tokens_0f52_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f52_setup_regs:
  mov     w3, 0x52
  ret

.align 2
po_tokens_0f52_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f52
  bl      print_string                            // Expect output " RUN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f52_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+415
  mov     x5, 0x52
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f52: .asciz " RUN "


.align 2
# Test po_tokens_0f53 tests po_tokens when passed w3=0x53 (BASIC keyword "SAVE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " SAVE ".
po_tokens_0f53_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f53_setup_regs:
  mov     w3, 0x53
  ret

.align 2
po_tokens_0f53_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f53
  bl      print_string                            // Expect output " SAVE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f53_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+420
  mov     x5, 0x53
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f53: .asciz " SAVE "


.align 2
# Test po_tokens_0f54 tests po_tokens when passed w3=0x54 (BASIC keyword "RANDOMIZE")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " RANDOMIZE ".
po_tokens_0f54_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f54_setup_regs:
  mov     w3, 0x54
  ret

.align 2
po_tokens_0f54_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f54
  bl      print_string                            // Expect output " RANDOMIZE "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f54_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+430
  mov     x5, 0x54
  mov     x6, 'E'
  ret

.align 0
msg_po_tokens_0f54: .asciz " RANDOMIZE "


.align 2
# Test po_tokens_0f55 tests po_tokens when passed w3=0x55 (BASIC keyword "IF")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " IF ".
po_tokens_0f55_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f55_setup_regs:
  mov     w3, 0x55
  ret

.align 2
po_tokens_0f55_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f55
  bl      print_string                            // Expect output " IF "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f55_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+433
  mov     x5, 0x55
  mov     x6, 'F'
  ret

.align 0
msg_po_tokens_0f55: .asciz " IF "


.align 2
# Test po_tokens_0f56 tests po_tokens when passed w3=0x56 (BASIC keyword "CLS")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " CLS ".
po_tokens_0f56_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f56_setup_regs:
  mov     w3, 0x56
  ret

.align 2
po_tokens_0f56_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f56
  bl      print_string                            // Expect output " CLS "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f56_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+437
  mov     x5, 0x56
  mov     x6, 'S'
  ret

.align 0
msg_po_tokens_0f56: .asciz " CLS "


.align 2
# Test po_tokens_0f57 tests po_tokens when passed w3=0x57 (BASIC keyword "DRAW")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " DRAW ".
po_tokens_0f57_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f57_setup_regs:
  mov     w3, 0x57
  ret

.align 2
po_tokens_0f57_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f57
  bl      print_string                            // Expect output " DRAW "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f57_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+442
  mov     x5, 0x57
  mov     x6, 'W'
  ret

.align 0
msg_po_tokens_0f57: .asciz " DRAW "


.align 2
# Test po_tokens_0f58 tests po_tokens when passed w3=0x58 (BASIC keyword "CLEAR")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " CLEAR ".
po_tokens_0f58_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f58_setup_regs:
  mov     w3, 0x58
  ret

.align 2
po_tokens_0f58_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f58
  bl      print_string                            // Expect output " CLEAR "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f58_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+448
  mov     x5, 0x58
  mov     x6, 'R'
  ret

.align 0
msg_po_tokens_0f58: .asciz " CLEAR "


.align 2
# Test po_tokens_0f59 tests po_tokens when passed w3=0x59 (BASIC keyword "RETURN")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " RETURN ".
po_tokens_0f59_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f59_setup_regs:
  mov     w3, 0x59
  ret

.align 2
po_tokens_0f59_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f59
  bl      print_string                            // Expect output " RETURN "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f59_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+455
  mov     x5, 0x59
  mov     x6, 'N'
  ret

.align 0
msg_po_tokens_0f59: .asciz " RETURN "


.align 2
# Test po_tokens_0f5a tests po_tokens when passed w3=0x5a (BASIC keyword "COPY")
# with bit 0 of [FLAGS] set to 0 (leading space _not_ suppressed) when used with
# a mock print-out routine that doesn't disturb any registers.
# Expected output is " COPY ".
po_tokens_0f5a_setup:
  _str    fake_channel_block, CURCHL              // [CURCHL] = fake_channel_block
  _strb   0, FLAGS                                // leading space _not_ suppressed

.align 2
po_tokens_0f5a_setup_regs:
  mov     w3, 0x5a
  ret

.align 2
po_tokens_0f5a_effects:
  stp     x29, x30, [sp, #-16]!                   // Push frame pointer, procedure link register on stack.
  mov     x29, sp                                 // Update frame pointer to new stack location.
  adr     x2, msg_po_tokens_0f5a
  bl      print_string                            // Expect output " COPY "
  ldp     x29, x30, [sp], #16                     // Pop frame pointer, procedure link register off stack.
  ret

.align 2
po_tokens_0f5a_effects_regs:
  mov     x0, ' '
  nzcv    0b0010
  adr     x1, fake_printout
  adr     x4, tkn_table+460
  mov     x5, 0x5a
  mov     x6, 'Y'
  ret

.align 0
msg_po_tokens_0f5a: .asciz " COPY "
