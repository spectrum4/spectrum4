#!/usr/bin/env bash

# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

function header {
  echo '# This file is part of the Spectrum +4 Project.'
  echo '# Licencing information can be found in the LICENCE file'
  echo '# (C) 2021 Spectrum +4 Authors. All rights reserved.'
  echo
  echo "# This file is auto-generated by ${0##*/}." 'DO NOT EDIT!'
  echo
  echo
  echo '.if ROMS_INCLUDE'
  echo '.else'
  echo '  .include "chan_flag.s"'
  echo '  .include "chan_k.s"'
  echo '  .include "chan_open.s"'
  echo '  .include "chan_p.s"'
  echo '  .include "chan_s.s"'
  echo '  .include "chn_cd_lu.s"'
  echo '  .include "cl_addr.s"'
  echo '  .include "cl_set.s"'
  echo '  .include "co_temp_5.s"'
  echo '  .include "copy_buff.s"'
  echo '  .include "ctlchrtab.s"'
  echo '  .include "indexer.s"'
  echo '  .include "key_input.s"'
  echo '  .include "new_tokens.s"'
  echo '  .include "po_1_oper.s"'
  echo '  .include "po_2_oper.s"'
  echo '  .include "po_able.s"'
  echo '  .include "po_any.s"'
  echo '  .include "po_at_set.s"'
  echo '  .include "po_attr.s"'
  echo '  .include "po_back.s"'
  echo '  .include "po_change.s"'
  echo '  .include "po_char.s"'
  echo '  .include "po_char_2.s"'
  echo '  .include "po_comma.s"'
  echo '  .include "po_cont.s"'
  echo '  .include "po_enter.s"'
  echo '  .include "po_fetch.s"'
  echo '  .include "po_fill.s"'
  echo '  .include "po_mosaic_half.s"'
  echo '  .include "po_msg.s"'
  echo '  .include "po_quest.s"'
  echo '  .include "po_right.s"'
  echo '  .include "po_scr.s"'
  echo '  .include "po_search.s"'
  echo '  .include "po_store.s"'
  echo '  .include "po_t_udg.s"'
  echo '  .include "po_tab.s"'
  echo '  .include "po_table.s"'
  echo '  .include "po_table_1.s"'
  echo '  .include "po_tokens.s"'
  echo '  .include "po_tv_1.s"'
  echo '  .include "po_tv_2.s"'
  echo '  .include "pr_all.s"'
  echo '  .include "print_out.s"'
  echo '  .include "print_token_udg_patch.s"'
  echo '  .include "print_w0.s"'
  echo '  .include "rejoin_po_t_udg.s"'
  echo '  .include "report_bb.s"'
  echo '  .include "temps.s"'
  echo '  .include "tkn_table.s"'
  echo '  .include "to_co_temp_5.s"'
  echo '  .include "to_end.s"'
  echo '  .include "to_report_bb.s"'
  echo '.endif'
  echo
  echo '.text'
  echo '.align 2'
}

cd "$(dirname "${0}")"

{
  header
  for ((df_sz=1; df_sz < 61; df_sz++)); do
    hexdfsz=$(printf "%02x" $df_sz)
    y=$((61-df_sz))
    screenthird=$((y/20))
    yoffset=$((y%20))
    dfoffset=$((screenthird*216*16*20 + 216*yoffset))
    hexdfoffset=$(printf "%04x" $dfoffset)
    echo
    echo
    echo "cl_chan_${hexdfsz}_setup:"
    echo "  _strb   0x${hexdfsz}, DF_SZ"
    echo "  _strb   0x6f, BORDCR"
    echo "  _strb   0b11110011, P_FLAG"
    echo "  _strh   0x0001, STRMS                   // Stream -3 points to first channel"
    echo "  _str    heap, CHANS                     // [CHANS] = start of heap"
    echo "  _str    'K', heap+0x10                  // Set channel identifier for first channel"
    echo "  ret"
    echo
    echo "cl_chan_${hexdfsz}_effects:"
    echo "  _str    heap, CURCHL                    // Current channel is keyboard"
    echo "  _resbit 1, FLAGS                        // Printer not in use"
    echo "  _resbit 5, FLAGS                        // No new key"
    echo "  _setbit 4, FLAGS2                       // K channel in use"
    echo "  _setbit 0, TV_FLAG                      // Lower screen in use"
    echo "  _strb   0x6f, ATTR_T                    // [BORDCR]"
    echo "  _strb   0x00, MASK_T"
    echo "  _strb   0b10100010, P_FLAG              // even (temp) bits cleared"
    echo "  _str    print_out, heap"
    echo "  _str    key_input, heap+8"
    echo "  _strb   109, S_POSN_X_L"
    echo "  _strb   59, S_POSN_Y_L"
    echo "  _strb   109, ECHO_E_X"
    echo "  _strb   59, ECHO_E_Y"
    echo "  _str    (display_file + 0x${hexdfoffset}), DF_CC_L"
    echo "  ret"
    echo
    echo "cl_chan_${hexdfsz}_effects_regs:"
    echo "  mov     x0, #59"
    echo "  mov     x1, #109"
    echo "  adr     x2, (display_file + 0x${hexdfoffset})"
    echo "  ldrb    w3, [x28, TV_FLAG-sysvars]"
    echo "  mov     x4, #${yoffset}"
    echo "  mov     x5, #216"
    echo "  ldr     x6, =0x10e00"
    echo "  ldrb    w9, [x28, FLAGS2-sysvars]"
    echo "  mov     x10, 'K'"
    echo "  nzcv    #0b0110"
    echo "  ret"
  done
} | ../../../utils/asm-format/asm-format > "test_cl_chan.gen-s"
