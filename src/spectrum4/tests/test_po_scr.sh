#!/usr/bin/env bash

# This file is part of the Spectrum +4 Project.
# Licencing information can be found in the LICENCE file
# (C) 2021 Spectrum +4 Authors. All rights reserved.

function header {
  echo '# This file is part of the Spectrum +4 Project.'
  echo '# Licencing information can be found in the LICENCE file'
  echo '# (C) 2021 Spectrum +4 Authors. All rights reserved.'
  echo
  echo "# This file is auto-generated by ${0##*/}." 'DO NOT EDIT!'
  echo
  echo '.text'
  echo '.align 2'
  echo
  echo
  echo '.if ROMS_INCLUDE'
  echo '.else'
  echo '  .include "chan_flag.s"'
  echo '  .include "chan_k.s"'
  echo '  .include "chan_open.s"'
  echo '  .include "chan_p.s"'
  echo '  .include "chan_s.s"'
  echo '  .include "chn_cd_lu.s"'
  echo '  .include "cl_addr.s"'
  echo '  .include "cl_set.s"'
  echo '  .include "indexer.s"'
  echo '  .include "po_msg.s"'
  echo '  .include "po_search.s"'
  echo '  .include "po_store.s"'
  echo '  .include "po_table.s"'
  echo '  .include "po_table_1.s"'
  echo '  .include "print_w0.s"'
  echo '  .include "temps.s"'
  echo '.endif'
}

cd "$(dirname "${0}")"

{
  header
  for df_sz in 1 12 19 24 47 55 59 60; do
    hex_dfsz=$(printf "%02x" $df_sz)
    for ((w0=df_sz+1; w0<61; w0+=3)); do
      hex_w0=$(printf "%02x" $w0)
      echo
      echo
      echo "po_scr_upper_screen_${hex_w0}_${hex_dfsz}_setup:"
      echo "  _resbit 1, FLAGS                        // not printing"
      echo "  _resbit 0, TV_FLAG                      // not lower screen"
      echo "  _strb   0x${hex_dfsz}, DF_SZ            // lower screen is ${df_sz} lines"
      echo "  ret"
      echo
      echo "po_scr_upper_screen_${hex_w0}_${hex_dfsz}_setup_regs:"
      echo "  mov     w0, #0x${hex_w0}                // w0 > [DF_SZ]"
      echo "  mov     w1, #0x17                       // arbitrary value for x position"
      echo "  ret"
      echo
      echo "po_scr_upper_screen_${hex_w0}_${hex_dfsz}_effects:"
      echo "  stp     x29, x30, [sp, #-16]!           // Push frame pointer, procedure link register on stack."
      echo "  mov     x29, sp                         // Update frame pointer to new stack location."
      echo "  mov     w0, #0x${hex_w0}"
      echo "  mov     w1, #0x17"
      echo "  bl      cl_set                          // since w0 > [DF_SZ] (${w0}>${df_sz}) this routine simply calls CL_SET with same inputs"
      echo "  ldp     x29, x30, [sp], #0x10           // Pop frame pointer, procedure link register off stack."
      echo "  ret"
      echo
      echo "po_scr_upper_screen_${hex_w0}_${hex_dfsz}_effects_regs:"
      echo "  stp     x29, x30, [sp, #-16]!           // Push frame pointer, procedure link register on stack."
      echo "  mov     x29, sp                         // Update frame pointer to new stack location."
      echo "  bl      cl_set                          // since w0 > [DF_SZ] (${w0}>${df_sz}) this routine simply calls CL_SET with same inputs"
      echo "  nzcv    #0b0010"
      echo "  ldp     x29, x30, [sp], #0x10           // Pop frame pointer, procedure link register off stack."
      echo "  ret"
    done
  done
} | ../../../utils/asm-format/asm-format > "test_po_scr.upperscreen.gen-s"

{
  header
  for df_sz in 1 12 19 24 47 55 59 60; do
    hex_dfsz=$(printf "%02x" $df_sz)
    for ((w0=61-df_sz; w0<61; w0+=3)); do
      [ "${w0}" -lt 2 ] && continue
      hex_w0=$(printf "%02x" $w0)
      echo
      echo
      echo "po_scr_lower_screen_${hex_w0}_${hex_dfsz}_setup:"
      echo "  _resbit 1, FLAGS                        // not printing"
      echo "  _setbit 0, TV_FLAG                      // lower screen in use"
      echo "  _strb   0x${hex_dfsz}, DF_SZ            // lower screen is ${df_sz} lines"
      echo "  ret"
      echo
      echo "po_scr_lower_screen_${hex_w0}_${hex_dfsz}_setup_regs:"
      echo "  mov     w0, #0x${hex_w0}                // w0 > 60-[DF_SZ]"
      echo "  mov     w1, #0x13                       // arbitrary value for x position"
      echo "  ret"
      echo
      echo "po_scr_lower_screen_${hex_w0}_${hex_dfsz}_effects:"
      echo "  stp     x29, x30, [sp, #-16]!           // Push frame pointer, procedure link register on stack."
      echo "  mov     x29, sp                         // Update frame pointer to new stack location."
      echo "  mov     w0, #0x${hex_w0}"
      echo "  mov     w1, #0x13"
      echo "  bl      cl_set                          // since w0 > 60-[DF_SZ] (${w0}>$((60-df_sz))) this routine simply calls CL_SET (no scrolling, not out-of-screen)"
      echo "  ldp     x29, x30, [sp], #0x10           // Pop frame pointer, procedure link register off stack."
      echo "  ret"
      echo
      echo "po_scr_lower_screen_${hex_w0}_${hex_dfsz}_effects_regs:"
      echo "  stp     x29, x30, [sp, #-16]!           // Push frame pointer, procedure link register on stack."
      echo "  mov     x29, sp                         // Update frame pointer to new stack location."
      echo "  bl      cl_set                          // since w0 > 60-[DF_SZ] (${w0}>$((60-df_sz))) this routine simply calls CL_SET (no scrolling, not out-of-screen)"
      if [ "$((w0+df_sz))" == 61 ]; then
        echo "  nzcv    #0b0110"
      else
        echo "  nzcv    #0b0010"
      fi
      echo "  ldp     x29, x30, [sp], #0x10           // Pop frame pointer, procedure link register off stack."
      echo "  ret"
    done
  done
} | ../../../utils/asm-format/asm-format > "test_po_scr.lowerscreen.gen-s"
