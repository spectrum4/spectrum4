---
spectrum128k:
  address: 0x0a80
  routine: PO-CHANGE

spectrum4:
  routine: po_change

tests:

  - name: test case 1

    description: |-
      This test defines two input routines ("old" and "new") using fake addresses and
      initially sets [CURCHL] to point to the old routine. Then it tries to change the
      input routine to be the "new" routine, by calling po_change passing a pointer to
      the new input routine.

    spectrum4:
      setup: |-
        // Allocate pointers on stack as follows:
        //   [sp+0x18]: 0x0123456789abcdef = fake new input routine
        //   [sp+0x10]: 0xfedcba9876543210 = fake old input routine
        //   [sp+0x08]: sp+0x10            = pointer to current input routine (old)
        //   [sp+0x00]: 0                  = padding for stack alignment
        sub sp, sp, #32
        add x0, sp, #0x10
        stp xzr, x0, [sp]
        ldr x0, =0xfedcba9876543210
        ldr x1, =0x0123456789abcde4
        stp x0, x1, [sp, #0x10]

        // Configure system variables as follows:
        // [CURCHL]: sp+0x08               = fake old input routine pointer pointer
        add x0, sp, #0x08
        str x0, [x28, CURCHL - sysvars]

        // Set registers x0..x27 to random values
        bl random_registers

        // x4: sp+0x10                   = fake old input routine pointer
        add x4, sp, #0x10

      effects: |-

        # On completion of po_change, the expected effects are:
        #   1) x5 should hold the address of the new routine
        #   2) [sp+0x08] should hold a pointer to the address of the new input routine

        add x5, sp, #0x18
        str x5, [sp, #0x08]
